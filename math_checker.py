import sympy as sp
import google.generativeai as genai
import re
import hashlib
import sqlite3
import datetime
import streamlit as st
import time
import random

def get_cache_connection():
    try:
        return sqlite3.connect('ai_cache.db', check_same_thread=False)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫—ç—à—É: {str(e)}")
        return None

def check_brackets(expr):
    stack = []
    for char in expr:
        if char == '(': stack.append(char)
        elif char == ')':
            if not stack: return False
            stack.pop()
    return len(stack) == 0

def generate_detailed_feedback(task, answer):
    common_mistakes = {
        "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–∫–æ–±–æ–∫": "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –∑–Ω–∞–∫–∏ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ —Å–∫–æ–±–æ–∫! –ü–æ–º–Ω–∏—Ç–µ: -(a+b) = -a - b",
        "—Å—Ç–µ–ø–µ–Ω–∏": "–ü—Ä–∞–≤–∏–ª–∞ —Å—Ç–µ–ø–µ–Ω–µ–π: a^m * a^n = a^(m+n), (a^m)^n = a^(m*n), (a*b)^n = a^n * b^n",
        "—Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è: a^2 - b^2 = (a-b)(a+b), a^2 ¬± 2ab + b^2 = (a¬±b)^2",
        "—É–ø—Ä–æ—â–µ–Ω–∏–µ": "–£–ø—Ä–æ—â–∞–π—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞: –æ–±—ä–µ–¥–∏–Ω—è–π—Ç–µ –ø–æ–¥–æ–±–Ω—ã–µ —Å–ª–∞–≥–∞–µ–º—ã–µ, —Å–æ–∫—Ä–∞—â–∞–π—Ç–µ –¥—Ä–æ–±–∏",
        "–∑–Ω–∞–∫–∏": "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∑–Ω–∞–∫–∞–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞",
        "–¥—Ä–æ–±–∏": "–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥—Ä–æ–±—è–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –æ–±—â–∏–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å, —Å–æ–∫—Ä–∞—â–∞–π—Ç–µ –¥—Ä–æ–±–∏",
        "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: ** –¥–ª—è —Å—Ç–µ–ø–µ–Ω–µ–π, * –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è"
    }
    
    feedback = ""
    if "(" in answer and not check_brackets(answer):
        feedback += "‚ö†Ô∏è **–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫–æ–±–æ–∫!**\n" + common_mistakes["—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–∫–æ–±–æ–∫"] + "\n\n"
    if "^" in answer:
        feedback += "‚ö†Ô∏è **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ** –≤–º–µ—Å—Ç–æ ^ –¥–ª—è —Å—Ç–µ–ø–µ–Ω–µ–π**\n–ù–∞–ø—Ä–∏–º–µ—Ä: x**2 –≤–º–µ—Å—Ç–æ x^2\n" + common_mistakes["—Å—Ç–µ–ø–µ–Ω–∏"] + "\n\n"
    if "factor" in task and "factor" not in answer:
        feedback += "‚ö†Ô∏è **–ó–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏)**\n" + common_mistakes["—Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"] + "\n\n"
    if "/" in answer and "simplify" in task:
        feedback += "‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥—Ä–æ–±–µ–π**\n" + common_mistakes["–¥—Ä–æ–±–∏"] + "\n\n"
    if "=" in answer and "solve" not in task:
        feedback += "‚ö†Ô∏è **–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è**\n"
        
    return feedback if feedback else "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –∑–Ω–∞–∫–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–æ—â–µ–Ω–æ."

def generate_math_explanation(task_expr, answer_expr):
    steps = []
    simplified = sp.simplify(task_expr)
    steps.append(f"1. **–£–ø—Ä–æ—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:**\n   `{sp.pretty(task_expr)}` ‚Üí `{sp.pretty(simplified)}`")
    
    expanded = sp.expand(simplified)
    factored = sp.factor(simplified)
    
    if expanded != simplified:
        steps.append(f"2. **–†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫–∏:**\n   `{sp.pretty(expanded)}`")
    if factored != simplified:
        steps.append(f"3. **–§–∞–∫—Ç–æ—Ä–∏–∑—É–µ–º:**\n   `{sp.pretty(factored)}`")
    
    if not task_expr.equals(answer_expr):
        try:
            student_simplified = sp.simplify(answer_expr)
            steps.append(f"4. **–í–∞—à –æ—Ç–≤–µ—Ç:**\n   `{sp.pretty(answer_expr)}`")
            steps.append(f"5. **–ü–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è:**\n   `{sp.pretty(student_simplified)}`")
            steps.append("6. **üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:** " + (
                "‚úÖ –í—ã—Ä–∞–∂–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –ø–æ—Å–ª–µ —É–ø—Ä–æ—â–µ–Ω–∏—è!" 
                if simplified.equals(student_simplified) 
                else "‚ùå –í—ã—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è"
            ))
        except:
            steps.append("4. **–í–∞—à –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É**")
    
    return "\n\n".join(steps)

def is_valid_math_expression(expr):
    allowed_chars = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/^=()[]{},. ")
    if any(char not in allowed_chars for char in expr):
        return False
    
    forbidden = {'__', 'import', 'eval', 'exec', 'open', 'lambda', ';', 'os', 'sys', 'subprocess', 'shutil', 'glob'}
    if any(func in expr for func in forbidden):
        return False
    
    if re.search(r'\b[a-zA-Z_][a-zA-Z0-9_]*\s*\(', expr):
        return False
    
    if len(expr) > 500:
        return False
        
    return True

def check_math(task, answer):
    try:
        if not is_valid_math_expression(task) or not is_valid_math_expression(answer):
            return {
                'is_correct': False,
                'explanation': "–í—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏",
                'correct_answer': "",
                'latex_answer': "",
                'detailed_feedback': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π."
            }
        
        expr_task = sp.sympify(task)
        expr_answer = sp.sympify(answer)
        
        is_correct = expr_task.equals(expr_answer)
        
        explanation = generate_math_explanation(expr_task, expr_answer)
        detailed_fb = generate_detailed_feedback(task, answer)
        
        return {
            'is_correct': is_correct,
            'explanation': explanation,
            'correct_answer': sp.pretty(expr_task),
            'latex_answer': sp.latex(expr_task),
            'detailed_feedback': detailed_fb
        }
    except Exception as e:
        return {
            'is_correct': False,
            'explanation': f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞: {str(e)}",
            'correct_answer': "",
            'latex_answer': "",
            'detailed_feedback': "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å."
        }

def get_math_ai_feedback(task, student_answer, correct_answer, api_key, model_name, prompt):
    try:
        if not api_key:
            return "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        query_hash = hashlib.md5(f"{task}_{student_answer}_{prompt}_{model_name}".encode()).hexdigest()
        conn = get_cache_connection()
        if not conn:
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫—ç—à—É"
        
        c = conn.cursor()
        c.execute("SELECT response FROM responses WHERE query_hash = ?", (query_hash,))
        cached_response = c.fetchone()
        
        if cached_response:
            return cached_response[0]
        
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(model_name)
        
        full_prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—á–µ–Ω–∏–∫—É —Å—Ä–µ–¥–Ω–µ–π —à–∫–æ–ª—ã –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.

–ó–∞–¥–∞–Ω–∏–µ: {task}
–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: {student_answer}
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}

{prompt}

–û–±—ä—è—Å–Ω–∏:
1. –ö–∞–∫ —Ä–µ—à–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø –∑–∞–¥–∞—á (–ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)
2. –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
3. –ì–¥–µ —É—á–µ–Ω–∏–∫ –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É –∏ –ø–æ—á–µ–º—É
4. –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ –±—É–¥—É—â–µ–º
5. –ü—Ä–∏–≤–µ–¥–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è

–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω.
"""
        response = model.generate_content(
            full_prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.3,
                max_output_tokens=2000,
                top_p=0.95
            ),
            safety_settings={
                'HARM_CATEGORY_HARASSMENT': 'BLOCK_NONE',
                'HARM_CATEGORY_HATE_SPEECH': 'BLOCK_NONE',
                'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'BLOCK_NONE',
                'HARM_CATEGORY_DANGEROUS_CONTENT': 'BLOCK_NONE'
            }
        )
        
        if response.candidates and response.candidates[0].content.parts:
            result = response.candidates[0].content.parts[0].text
        else:
            result = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        c.execute("INSERT OR REPLACE INTO responses (query_hash, response, timestamp) VALUES (?, ?, ?)",
                  (query_hash, result, datetime.datetime.now()))
        conn.commit()
        conn.close()
        
        return result
    
    except Exception as e:
        error_str = str(e)
        if "429" in error_str or "quota" in error_str.lower():
            return "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 60 —Å–µ–∫—É–Ω–¥."
        elif "404" in error_str:
            return "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        else:
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_str}"

def generate_personalized_task(student_id):
    try:
        conn = get_cache_connection()
        if not conn:
            return "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2*x + 5 = 15", "5"
        
        c = conn.cursor()
        
        c.execute("""
            SELECT error_type, COUNT(*) as count 
            FROM error_history 
            WHERE student_id = ? AND subject = 'math'
            GROUP BY error_type 
            ORDER BY count DESC 
            LIMIT 1
        """, (student_id,))
        error_row = c.fetchone()
        
        if error_row:
            error_type = error_row[0]
            if "brackets" in error_type:
                return "–†–∞—Å–∫—Ä–æ–π—Ç–µ —Å–∫–æ–±–∫–∏: (x + 2)*(x - 3)", "x**2 - x - 6"
            elif "factor" in error_type:
                return "–†–∞–∑–ª–æ–∂–∏—Ç–µ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏: x**2 - 4", "(x-2)(x+2)"
            elif "simplify" in error_type:
                return "–£–ø—Ä–æ—Å—Ç–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: (x**2 - 4)/(x-2)", "x+2"
        
        c.execute("""
            SELECT topic, AVG(score) as avg_score
            FROM learning_history
            WHERE student_id = ? AND subject = 'math'
            GROUP BY topic
            ORDER BY avg_score ASC
            LIMIT 1
        """, (student_id,))
        topic_row = c.fetchone()
        
        if topic_row:
            topic = topic_row[0]
            if "–ê–ª–≥–µ–±—Ä–∞" in topic:
                return "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2*x + 5 = 15", "5"
            elif "–ì–µ–æ–º–µ—Ç—Ä–∏—è" in topic:
                return "–ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 5 –∏ –≤—ã—Å–æ—Ç–æ–π 3", "7.5"
            elif "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è" in topic:
                return "–£–ø—Ä–æ—Å—Ç–∏—Ç–µ: sin(x)**2 + cos(x)**2", "1"
        
        return "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 3*x - 7 = 8", "5"
    except:
        return "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2*x + 5 = 15", "5"
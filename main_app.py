import os
import streamlit as st
from PIL import Image
import pytesseract
import plotly.express as px
import plotly.graph_objects as go
import datetime
import time
import google.generativeai as genai
import platform
import hashlib
import sqlite3
import re
import numpy as np
import pandas as pd
import requests
import json
from math_checker import check_math, get_math_ai_feedback, generate_personalized_task
from english_checker import check_english, get_grammar_explanation
import tempfile
import base64
import warnings
import traceback
from streamlit_lottie import st_lottie
from streamlit_player import st_player
import calendar
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from io import BytesIO
import fitz  # PyMuPDF
import pdfplumber
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from canvas_api import CanvasAPI
import logging
from contextlib import contextmanager
from functools import wraps

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings.filterwarnings("ignore", category=UserWarning, module="google")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –°–ù–ê–ß–ê–õ–ê!
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('eduai.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('EduAI')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–µ–¥—ã
if platform.system() == 'Windows':
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
elif platform.system() == 'Darwin':
    pytesseract.pytesseract.tesseract_cmd = '/usr/local/bin/tesseract'
else:
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

os.environ['OMP_THREAD_LIMIT'] = '1'

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
try:
    from grading_system import GradingSystem, LearningAnalytics
    GRADING_SYSTEM_AVAILABLE = True
except ImportError:
    logger.warning("grading_system.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è.")
    GRADING_SYSTEM_AVAILABLE = False

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_errors(operation_name):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {operation_name}: {str(e)}", exc_info=True)
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ {operation_name}: {str(e)}")
                return None
        return wrapper
    return decorator

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@st.cache_resource
def load_language_tool():
    """–ö—ç—à–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é LanguageTool"""
    try:
        import language_tool_python
        return language_tool_python.LanguageTool('en-US')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LanguageTool: {str(e)}")
        return None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.set_page_config(
    page_title="EduAI Tutor Pro",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/eduai-tutor',
        'Report a bug': "https://github.com/eduai-tutor/issues",
        'About': "EduAI Tutor Pro - AI —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"
    }
)
def log_performance(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        elapsed = time.time() - start_time
        
        if elapsed > 2:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            logger.warning(f"{func.__name__} –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å {elapsed:.2f}—Å")
        
        return result
    return wrapper
# –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º:

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('eduai.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('EduAI')

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
try:
    from grading_system import GradingSystem, LearningAnalytics
    GRADING_SYSTEM_AVAILABLE = True
except ImportError:
    logger.warning("grading_system.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è.")
    GRADING_SYSTEM_AVAILABLE = False
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings.filterwarnings("ignore", category=UserWarning, module="google")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–µ–¥—ã
if platform.system() == 'Windows':
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
elif platform.system() == 'Darwin':
    pytesseract.pytesseract.tesseract_cmd = '/usr/local/bin/tesseract'
else:
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

os.environ['OMP_THREAD_LIMIT'] = '1'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.set_page_config(
    page_title="EduAI Tutor Pro",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/eduai-tutor',
        'Report a bug': "https://github.com/eduai-tutor/issues",
        'About': "EduAI Tutor Pro - AI —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"
    }
)

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {
    "–†—É—Å—Å–∫–∏–π": {
        "title": "üöÄ EduAI Tutor Pro",
        "subject": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        "math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "eng": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "test": "–¢–µ—Å—Ç (PDF)",
        "check_math": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É",
        "upload": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)",
        "example": "–ü—Ä–∏–º–µ—Ä:",
        "task": "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
        "answer": "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
        "correct": "‚úÖ –í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
        "incorrect": "‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º:",
        "solution": "üìö –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:",
        "original": "–ò—Å—Ö–æ–¥–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:",
        "explanation": "–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:",
        "correct_answer": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
        "text_rep": "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:",
        "errors": "üîç –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫",
        "progress": "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å",
        "history": "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤",
        "check_text": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç",
        "no_errors": "‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
        "why_error": "üìñ –ü–æ—á–µ–º—É —ç—Ç–æ –æ—à–∏–±–∫–∞?",
        "gpt_feedback": "ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
        "student_id": "ID —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        "feedback": "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:",
        "send_feedback": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
        "ai_math": "ü§ñ –ü–æ–ª—É—á–∏—Ç—å AI-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
        "ai_math_prompt": "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä",
        "ai_loading": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...",
        "ai_error": "–û—à–∏–±–∫–∞ AI, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "api_settings": "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Gemini",
        "api_key": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Google AI API –∫–ª—é—á:",
        "api_help": "–ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ aistudio.google.com/app/apikey",
        "key_saved": "–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        "mobile_warning": "üì± –î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é",
        "connection_success": "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Gemini —É—Å–ø–µ—à–Ω–æ!",
        "connection_fail": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á API",
        "available_models": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:",
        "invalid_key": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á",
        "ai_retry": "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
        "ai_clear": "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç",
        "rate_limit": "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 60 —Å–µ–∫—É–Ω–¥",
        "model_not_found": "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.",
        "model_selection": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å AI:",
        "default_model": "gemini-pro",
        "wait_message": "‚è≥ –û–∂–∏–¥–∞–µ–º —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API...",
        "retry_countdown": "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑:",
        "app_name": "EduAI Tutor Pro",
        "app_description": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π",
        "features": "üåü –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏",
        "pro_tip": "üí° –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç",
        "processing": "üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...",
        "extraction_success": "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω!",
        "extraction_error": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞",
        "processing_error": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞",
        "pdf_warning": "‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyMuPDF: pip install PyMuPDF",
        "export_results": "üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        "export_btn": "–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
        "pdf_processing": "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF...",
        "ocr_processing": "üñºÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
        "canvas_integration": "üéì –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Canvas LMS",
        "canvas_url": "Canvas URL:",
        "canvas_key": "Canvas API Key:",
        "canvas_help": "–ü–æ–ª—É—á–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Canvas",
        "canvas_courses": "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        "canvas_assignments": "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
        "canvas_load": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Canvas",
        "canvas_upload": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ Canvas",
        "canvas_success": "‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Canvas!",
        "canvas_error": "‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Canvas",
        "adaptive_learning": "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
        "generate_task": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        "learning_analytics": "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è",
        "topic_analysis": "üìö –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º",
        "activity_calendar": "üóìÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "language_select": "üåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        "error_cloud": "‚òÅÔ∏è –û–±–ª–∞–∫–æ –æ—à–∏–±–æ–∫",
        "video_explanation": "üé• –í–∏–¥–µ–æ-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
        "file_type_error": "‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG)",
        "test_mode": "üìù –¢–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º",
        "upload_test": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Å —Ç–µ—Å—Ç–æ–º",
        "upload_answers": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Å –æ—Ç–≤–µ—Ç–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞",
        "process_test": "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç",
        "question": "–í–æ–ø—Ä–æ—Å",
        "student_answer": "–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞",
        "correct_answer": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
        "result": "–†–µ–∑—É–ª—å—Ç–∞—Ç",
        "score": "–û—Ü–µ–Ω–∫–∞",
        "correct_answers": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
        "test_results": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞",
        "test_analysis": "üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∞",
        "answer_key": "–ö–ª—é—á –æ—Ç–≤–µ—Ç–æ–≤",
        "extract_answers": "–ò–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç—ã",
        "test_pdf_error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–∞ PDF",
        "answers_pdf_error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ PDF",
        "no_questions_found": "–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        "no_answers_found": "–û—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        "test_processed": "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
        "answers_processed": "‚úÖ –û—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã",
        "view_test": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞",
        "download_results": "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "answer_format": "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤: A, B, C, D...",
        "question_format": "–§–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤: 1., 2., 3....",
        "test_instructions": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ç–µ—Å—Ç–æ–≤",
        "total_questions": "–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤",
        "test_grade": "–û—Ü–µ–Ω–∫–∞ –∑–∞ —Ç–µ—Å—Ç",
        "grade_system": "–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫:",
        "5_point": "5-–±–∞–ª–ª—å–Ω–∞—è",
        "100_point": "100% —Å–∏—Å—Ç–µ–º–∞",
        "auto_grade": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞",
        "grade_result": "–û—Ü–µ–Ω–∫–∞:",
        "grade_scale": "–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏:",
        "grade_description": "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è",
        "grade_5": "–û—Ç–ª–∏—á–Ω–æ (5)",
        "grade_4": "–•–æ—Ä–æ—à–æ (4)",
        "grade_3": "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (3)",
        "grade_2": "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (2)",
        "grade_rules_math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 5 - 0 –æ—à–∏–±–æ–∫, 4 - 1 –æ—à–∏–±–∫–∞, 3 - 2 –æ—à–∏–±–∫–∏, 2 - 3+ –æ—à–∏–±–æ–∫",
        "grade_rules_eng": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: 5 - 0 –æ—à–∏–±–æ–∫, 4 - 1-2 –æ—à–∏–±–∫–∏, 3 - 3-4 –æ—à–∏–±–∫–∏, 2 - 5+ –æ—à–∏–±–æ–∫",
        "grade_rules_test": "–¢–µ—Å—Ç—ã: 5 - 90-100%, 4 - 75-89%, 3 - 60-74%, 2 - 0-59%",
        "grade_comment": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ü–µ–Ω–∫–µ:",
        "view_grades": "üìù –ñ—É—Ä–Ω–∞–ª –æ—Ü–µ–Ω–æ–∫",
        "manual_correction": "‚úèÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤",
        "recalculate_results": "üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "test_summary": "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    },
    "English": {
        "title": "üöÄ EduAI Tutor Pro",
        "subject": "Select subject:",
        "math": "Mathematics",
        "eng": "English",
        "test": "Test (PDF)",
        "check_math": "Check Math",
        "upload": "Upload student work (PDF or image)",
        "example": "Example:",
        "task": "Enter task:",
        "answer": "Enter answer:",
        "correct": "‚úÖ Correct! Excellent work!",
        "incorrect": "‚ùå Answer is incorrect. Let's analyze:",
        "solution": "üìö Detailed solution:",
        "original": "Original task:",
        "explanation": "Step-by-step explanation:",
        "correct_answer": "Correct answer:",
        "text_rep": "Text representation:",
        "errors": "üîç Error analysis",
        "progress": "üìä Your progress",
        "history": "Answer history",
        "check_text": "Check text",
        "no_errors": "‚úÖ No errors found!",
        "why_error": "üìñ Why is this an error?",
        "gpt_feedback": "ü§ñ AI recommendation",
        "student_id": "Student ID:",
        "feedback": "Leave feedback:",
        "send_feedback": "Send feedback",
        "ai_math": "ü§ñ Get AI explanation",
        "ai_math_prompt": "Explain the solution as a tutor",
        "ai_loading": "Generating AI explanation...",
        "ai_error": "AI error, try again later",
        "settings": "‚öôÔ∏è Settings",
        "api_settings": "üîë Google Gemini Settings",
        "api_key": "Enter your Google AI API key:",
        "api_help": "Get at aistudio.google.com/app/apikey",
        "key_saved": "Key saved!",
        "mobile_warning": "üì± Use landscape for better experience",
        "connection_success": "‚úÖ Connected to Google Gemini!",
        "connection_fail": "‚ùå Connection error. Check API key",
        "available_models": "Available models:",
        "invalid_key": "Invalid API key",
        "ai_retry": "üîÑ Try again",
        "ai_clear": "‚ùå Clear response",
        "rate_limit": "‚ö†Ô∏è Rate limit reached. Wait 60 seconds",
        "model_not_found": "‚ö†Ô∏è Model not found. Use another model.",
        "model_selection": "Select AI model:",
        "default_model": "gemini-pro",
        "wait_message": "‚è≥ Waiting for API limit reset...",
        "retry_countdown": "Retry in:",
        "app_name": "EduAI Tutor Pro",
        "app_description": "AI-Powered Homework Grading System",
        "features": "üåü Premium Features",
        "pro_tip": "üí° Pro Tip",
        "processing": "üîç Processing file...",
        "extraction_success": "‚úÖ Text extracted successfully!",
        "extraction_error": "‚ö†Ô∏è Failed to extract text from file",
        "processing_error": "‚ùå File processing error",
        "pdf_warning": "‚ö†Ô∏è Install PyMuPDF for PDF processing: pip install PyMuPDF",
        "export_results": "üì• Export results",
        "export_btn": "Download report",
        "pdf_processing": "üìÑ Processing PDF...",
        "ocr_processing": "üñºÔ∏è Image recognition...",
        "canvas_integration": "üéì Canvas LMS Integration",
        "canvas_url": "Canvas URL:",
        "canvas_key": "Canvas API Key:",
        "canvas_help": "Get from Canvas settings",
        "canvas_courses": "Select course:",
        "canvas_assignments": "Select assignment:",
        "canvas_load": "Load from Canvas",
        "canvas_upload": "Send grade to Canvas",
        "canvas_success": "‚úÖ Grade sent to Canvas!",
        "canvas_error": "‚ùå Canvas integration error",
        "adaptive_learning": "üéØ Personalized Tasks",
        "generate_task": "Generate Task",
        "learning_analytics": "üìà Learning Analytics",
        "topic_analysis": "üìö Topic Analysis",
        "activity_calendar": "üóìÔ∏è Activity Calendar",
        "language_select": "üåê Interface Language:",
        "error_cloud": "‚òÅÔ∏è Error Cloud",
        "video_explanation": "üé• Video Explanation",
        "file_type_error": "‚ö†Ô∏è Unsupported file format. Use PDF or images (PNG, JPG)",
        "test_mode": "üìù Multiple Choice Test",
        "upload_test": "Upload Test PDF",
        "upload_answers": "Upload Student Answers PDF",
        "process_test": "Process Test",
        "question": "Question",
        "student_answer": "Student Answer",
        "correct_answer": "Correct Answer",
        "result": "Result",
        "score": "Score",
        "correct_answers": "Correct Answers",
        "test_results": "Test Results",
        "test_analysis": "üìä Test Analysis",
        "answer_key": "Answer Key",
        "extract_answers": "Extract Answers",
        "test_pdf_error": "Test PDF processing error",
        "answers_pdf_error": "Answers PDF processing error",
        "no_questions_found": "No questions found",
        "no_answers_found": "No answers found",
        "test_processed": "‚úÖ Test processed successfully",
        "answers_processed": "‚úÖ Answers processed successfully",
        "view_test": "View Test",
        "download_results": "Download Results",
        "answer_format": "Answer format: A, B, C, D...",
        "question_format": "Question format: 1., 2., 3....",
        "test_instructions": "Test format instructions",
        "total_questions": "Total Questions",
        "test_grade": "Test Grade",
        "grade_system": "Grading system:",
        "5_point": "5-point scale",
        "100_point": "100% system",
        "auto_grade": "Auto grading",
        "grade_result": "Grade:",
        "grade_scale": "Grading scale:",
        "grade_description": "Grading criteria",
        "grade_5": "Excellent (5)",
        "grade_4": "Good (4)",
        "grade_3": "Satisfactory (3)",
        "grade_2": "Unsatisfactory (2)",
        "grade_rules_math": "Math: 5 - 0 errors, 4 - 1 error, 3 - 2 errors, 2 - 3+ errors",
        "grade_rules_eng": "English: 5 - 0 errors, 4 - 1-2 errors, 3 - 3-4 errors, 2 - 5+ errors",
        "grade_rules_test": "Tests: 5 - 90-100%, 4 - 75-89%, 3 - 60-74%, 2 - 0-59%",
        "grade_comment": "Grade comment:",
        "view_grades": "üìù Gradebook",
        "manual_correction": "‚úèÔ∏è Manual Correction",
        "recalculate_results": "üîÑ Recalculate Results",
        "test_summary": "üìä Test Summary"
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
cache_conn = None

@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    conn = None
    try:
        conn = sqlite3.connect('ai_cache.db', check_same_thread=False, timeout=10)
        conn.row_factory = sqlite3.Row  # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º
        yield conn
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
        if conn:
            conn.rollback()
        raise
    finally:
        if conn:
            conn.close()

def init_cache_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            c.execute('''CREATE TABLE IF NOT EXISTS responses
                         (query_hash TEXT PRIMARY KEY, 
                          response TEXT, 
                          timestamp DATETIME,
                          model TEXT)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS learning_history
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          student_id TEXT,
                          subject TEXT,
                          topic TEXT,
                          score REAL,
                          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
            
            c.execute('''CREATE INDEX IF NOT EXISTS idx_learning_student 
                         ON learning_history(student_id, timestamp DESC)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS error_history
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          student_id TEXT,
                          subject TEXT,
                          error_type TEXT,
                          count INTEGER DEFAULT 1,
                          last_occurrence DATETIME DEFAULT CURRENT_TIMESTAMP,
                          UNIQUE(student_id, error_type))''')
            
            c.execute('''CREATE INDEX IF NOT EXISTS idx_error_student 
                         ON error_history(student_id)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS test_results
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          student_id TEXT,
                          test_name TEXT,
                          score REAL,
                          correct_count INTEGER,
                          total_count INTEGER,
                          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS grades
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          student_id TEXT,
                          subject TEXT,
                          grade INTEGER,
                          percentage REAL,
                          comment TEXT,
                          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
            
            c.execute('''CREATE INDEX IF NOT EXISTS idx_grades_student 
                         ON grades(student_id, timestamp DESC)''')
            
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if not init_cache_db():
    st.warning("‚ö†Ô∏è –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
def init_session_state():
    keys = [
        'math_scores', 'uploaded_text', 'gemini_key', 
        'math_result', 'english_errors', 'ai_status', 'feedback_text',
        'last_request_time', 'available_models', 'selected_model',
        'rate_limit_timer', 'waiting_for_api', 'student_id',
        'api_usage_count', 'api_limit', 'last_api_call',
        'file_processed', 'file_uploaded', 'learning_level',
        'current_subject', 'feedback_sent', 'canvas_url', 
        'canvas_key', 'canvas_courses', 'canvas_assignments',
        'selected_course', 'selected_assignment', 'personalized_task',
        'language', 'activity_data', 'error_history',
        'test_pdf', 'answers_pdf', 'test_data', 'student_answers',
        'test_results', 'test_score', 'show_test_viewer',
        'test_name', 'test_processed', 'answers_processed',
        'grade_system', 'math_grade', 'eng_grade', 'test_grade', 
        'grade_history', 'grade_comment', 'grade_rules',
        'english_score', 'show_gradebook'
    ]
    defaults = {
        'math_scores': [],
        'uploaded_text': "",
        'gemini_key': "",
        'math_result': None,
        'english_errors': [],
        'feedback_text': "",
        'ai_status': {
            'math': {'generating': False, 'response': None, 'error': None},
            'eng': {}
        },
        'last_request_time': 0,
        'available_models': [],
        'selected_model': "gemini-pro",
        'rate_limit_timer': 0,
        'waiting_for_api': False,
        'student_id': "STUD-001",
        'api_usage_count': 0,
        'api_limit': 60,
        'last_api_call': time.time(),
        'file_processed': False,
        'file_uploaded': False,
        'learning_level': "–°—Ä–µ–¥–Ω–∏–π",
        'current_subject': "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        'feedback_sent': False,
        'canvas_url': "",
        'canvas_key': "",
        'canvas_courses': [],
        'canvas_assignments': [],
        'selected_course': None,
        'selected_assignment': None,
        'personalized_task': {"task": "", "answer": ""},
        'language': "–†—É—Å—Å–∫–∏–π",
        'activity_data': pd.DataFrame(columns=['date', 'activity']),
        'error_history': [],
        'test_pdf': None,
        'answers_pdf': None,
        'test_data': [],
        'student_answers': {},
        'test_results': [],
        'test_score': 0,
        'show_test_viewer': False,
        'test_name': "–¢–µ—Å—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
        'test_processed': False,
        'answers_processed': False,
        'grade_system': "5_point",
        'math_grade': None,
        'eng_grade': None,
        'test_grade': None,
        'grade_history': [],
        'grade_comment': "",
        'grade_rules': {
            "math": {"5": 0, "4": 1, "3": 2, "2": 3},
            "eng": {"5": 0, "4": 2, "3": 4, "2": 5},
            "test": {"5": 90, "4": 75, "3": 60, "2": 0}
        },
        'english_score': None,
        'show_gradebook': False
    }
    
    for key in keys:
        if key not in st.session_state:
            st.session_state[key] = defaults.get(key, None)

init_session_state()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ API
def check_api_rate_limit():
    current_time = time.time()
    elapsed = current_time - st.session_state.last_api_call
    
    if elapsed > 60:
        st.session_state.api_usage_count = 0
        st.session_state.last_api_call = current_time
    
    if st.session_state.api_usage_count >= st.session_state.api_limit:
        remaining = 60 - int(elapsed)
        return False, remaining
    
    return True, 0

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
def generate_report():
    try:
        report = f"–û—Ç—á–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {st.session_state.student_id}\n"
        report += f"–£—Ä–æ–≤–µ–Ω—å: {st.session_state.learning_level}\n"
        report += f"–ü—Ä–µ–¥–º–µ—Ç: {st.session_state.current_subject}\n"
        report += f"–î–∞—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        
        if st.session_state.math_result:
            report += "=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ ===\n"
            report += f"–ó–∞–¥–∞–Ω–∏–µ: {st.session_state.math_result.get('task', '')}\n"
            report += f"–û—Ç–≤–µ—Ç: {st.session_state.math_result.get('answer', '')}\n"
            report += f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {'–î–∞' if st.session_state.math_result['is_correct'] else '–ù–µ—Ç'}\n"
            report += f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{st.session_state.math_result['explanation']}\n\n"
        
        if st.session_state.english_errors:
            report += "=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É ===\n"
            report += f"–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(st.session_state.english_errors)}\n"
            for i, error in enumerate(st.session_state.english_errors):
                report += f"–û—à–∏–±–∫–∞ {i+1}: {error['message']}\n"
                report += f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {error.get('suggestion', '')}\n\n"
        
        if 'math_scores' in st.session_state and st.session_state.math_scores:
            report += "=== –ü—Ä–æ–≥—Ä–µ—Å—Å ===\n"
            report += f"–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {len(st.session_state.math_scores)}\n"
            report += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {sum(st.session_state.math_scores)}\n"
            report += f"–¢–æ—á–Ω–æ—Å—Ç—å: {sum(st.session_state.math_scores)/len(st.session_state.math_scores)*100:.1f}%\n"
        
        if st.session_state.test_results:
            report += "\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ ===\n"
            report += f"–¢–µ—Å—Ç: {st.session_state.test_name}\n"
            report += f"–û—Ü–µ–Ω–∫–∞: {st.session_state.test_score}%\n"
            report += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {sum(1 for r in st.session_state.test_results if r['is_correct'])}/{len(st.session_state.test_results)}\n"
        
        return report
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"

@handle_errors("–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
def process_uploaded_file(uploaded_file):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        text_content = ""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB)
        file_size = len(uploaded_file.getvalue())
        if file_size > 10 * 1024 * 1024:
            st.error("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>10MB). –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
            return None
        
        if uploaded_file.type == "application/pdf":
            with st.spinner(translations[st.session_state.language]["pdf_processing"]):
                try:
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                        tmp_file.write(uploaded_file.getvalue())
                        tmp_file_path = tmp_file.name
                    
                    doc = fitz.open(tmp_file_path)
                    
                    if len(doc) > 50:
                        st.warning("PDF —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 50 —Å—Ç—Ä–∞–Ω–∏—Ü. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50.")
                    
                    for page_num, page in enumerate(doc):
                        if page_num >= 50:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                            break
                        text_content += page.get_text()
                    
                    doc.close()
                    os.unlink(tmp_file_path)
                    
                    logger.info(f"PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(doc)} —Å—Ç—Ä–∞–Ω–∏—Ü, {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {str(e)}")
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF: {str(e)}")
                    return None
                    
        elif uploaded_file.type in ["image/png", "image/jpeg", "image/jpg"]:
            with st.spinner(translations[st.session_state.language]["ocr_processing"]):
                try:
                    image = Image.open(uploaded_file)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if image.size[0] * image.size[1] > 10000000:  # 10 –º–µ–≥–∞–ø–∏–∫—Å–µ–ª–µ–π
                        st.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä...")
                        image.thumbnail((4000, 4000))
                    
                    image = image.convert('L')
                    image = image.point(lambda x: 0 if x < 128 else 255, '1')
                    text_content = pytesseract.image_to_string(image, lang='rus+eng')
                    
                    logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ OCR: {str(e)}")
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç: {str(e)}")
                    return None
        else:
            st.warning(translations[st.session_state.language]["file_type_error"])
            return None
        
        if not text_content.strip():
            st.warning("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            return None
            
        return text_content.strip()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return None
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def generate_activity_calendar():
    try:
        if st.session_state.activity_data.empty:
            dates = pd.date_range(end=datetime.datetime.today(), periods=30, freq='D')
            activity = np.random.randint(0, 10, size=30)
            st.session_state.activity_data = pd.DataFrame({'date': dates, 'activity': activity})
        
        df = st.session_state.activity_data.copy()
        df['date'] = pd.to_datetime(df['date'])
        df['year'] = df['date'].dt.year
        df['month'] = df['date'].dt.month
        df['day'] = df['date'].dt.day
        
        current_year = datetime.datetime.now().year
        current_month = datetime.datetime.now().month
        
        month_days = calendar.monthrange(current_year, current_month)[1]
        days = [datetime.date(current_year, current_month, day) for day in range(1, month_days+1)]
        
        activity_map = {}
        for date, act in zip(df['date'], df['activity']):
            if date.year == current_year and date.month == current_month:
                activity_map[date.day] = act
        
        fig = go.Figure()
        
        for day in days:
            day_activity = activity_map.get(day.day, 0)
            color = f'rgba(106, 17, 203, {min(1.0, day_activity/10)})'
            
            fig.add_trace(go.Scatter(
                x=[day.weekday()],
                y=[5 - day.isocalendar()[1] + day.isocalendar()[1] - days[0].isocalendar()[1]],
                mode='markers',
                marker=dict(
                    size=30,
                    color=color,
                    line=dict(width=1, color='rgba(0,0,0,0.2)')
                ),
                text=f"{day.strftime('%d %b')}: {day_activity} –∑–∞–¥–∞—á",
                hoverinfo='text',
                showlegend=False
            ))
        
        fig.update_xaxes(
            tickvals=[0, 1, 2, 3, 4, 5, 6],
            ticktext=['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
            range=[-0.5, 6.5]
        )
        
        fig.update_yaxes(
            visible=False, 
            range=[-1, 6],
            scaleanchor="x", 
            scaleratio=1
        )
        
        fig.update_layout(
            title=f'–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ {calendar.month_name[current_month]} {current_year}',
            height=400,
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            margin=dict(l=0, r=0, t=40, b=0),
            xaxis=dict(fixedrange=True),
            yaxis=dict(fixedrange=True)
        )
        
        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}")
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞–∫–∞ –æ—à–∏–±–æ–∫
def generate_error_cloud():
    try:
        if not st.session_state.error_history:
            return None
            
        error_text = " ".join([f"{error['error_type']} " * error['count'] 
                              for error in st.session_state.error_history])
        
        wordcloud = WordCloud(
            width=800, 
            height=400, 
            background_color='white',
            colormap='viridis',
            max_words=50
        ).generate(error_text)
        
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis('off')
        return fig
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ –æ—à–∏–±–æ–∫: {str(e)}")
        return None
if GRADING_SYSTEM_AVAILABLE:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
    grading_system = GradingSystem()  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
    grade_info = grading_system.grade_test(st.session_state.test_results)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ü–µ–Ω–∫—É, –∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
    grade_value = grade_info['grade']  # –û—Ü–µ–Ω–∫–∞: 5, 4, 3, 2
    feedback = grade_info['feedback']  # "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç..."
# –ó–∞–≥—Ä—É–∑–∫–∞ Lottie –∞–Ω–∏–º–∞—Ü–∏–∏
def load_lottie(url):
    try:
        if url.startswith('http'):
            r = requests.get(url)
            if r.status_code == 200:
                return r.json()
        return None
    except:
        return None
# ============ –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –ü–ï–†–ï–î extract_questions_from_pdf ============
def diagnose_pdf(pdf_file):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PDF –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        with pdfplumber.open(pdf_file) as pdf:
            st.write(f"üìÑ **–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:** {len(pdf.pages)}")
            
            for i, page in enumerate(pdf.pages[:2], 1):
                text = page.extract_text()
                st.write(f"\n**üìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i}:**")
                st.code(text if text else "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", language="text")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")

# –ó–¥–µ—Å—å –∏–¥—ë—Ç –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è extract_questions_from_pdf...
# ========== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==========

def extract_questions_from_pdf(pdf_file):
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ PDF —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    """
    questions = []
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ç–µ—Å—Ç–∞")
    
    try:
        with pdfplumber.open(pdf_file) as pdf:
            full_text = ""
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            for page_num, page in enumerate(pdf.pages, 1):
                try:
                    page_text = page.extract_text()
                    if page_text:
                        full_text += f"\n--- PAGE {page_num} ---\n{page_text}"
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")
                    continue
            
            if not full_text.strip():
                st.error("PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
                return []
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–æ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫ –æ–±—â–∏–º)
            question_patterns = [
                # –ü–∞—Ç—Ç–µ—Ä–Ω 1: "–í–æ–ø—Ä–æ—Å 1: —Ç–µ–∫—Å—Ç"
                r'–í–æ–ø—Ä–æ—Å\s*(\d+)[:\s]+(.*?)(?=\n–í–æ–ø—Ä–æ—Å\s*\d+|\n[A-D][.)]\s|$)',
                # –ü–∞—Ç—Ç–µ—Ä–Ω 2: "1. —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"
                r'(?:^|\n)(\d+)\.\s+(.*?)(?=\n\d+\.|\n[A-D][.)]\s|$)',
                # –ü–∞—Ç—Ç–µ—Ä–Ω 3: "1) —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"
                r'(?:^|\n)(\d+)\)\s+(.*?)(?=\n\d+\)|\n[A-D][.)]\s|$)',
                # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä –∏ —Ç–µ–∫—Å—Ç
                r'(?:^|\n)(\d+)\s+(.*?)(?=\n\d+\s|\n[A-D][.)]\s|$)'
            ]
            
            found_questions = {}
            
            for pattern in question_patterns:
                matches = re.finditer(pattern, full_text, re.DOTALL | re.MULTILINE)
                
                for match in matches:
                    q_num = int(match.group(1))
                    question_text = match.group(2).strip()
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
                    if len(question_text) < 10:
                        continue
                    
                    # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞
                    options = {}
                    options_pattern = r'([A-D])[.)]\s+([^\n]+?)(?=\n[A-D][.)]|\n\d+[.)]|\n–û—Ç–≤–µ—Ç|\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π|\n*$)'
                    
                    # –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    search_start = match.end()
                    search_text = full_text[search_start:search_start+1000]
                    
                    for opt_letter, opt_text in re.findall(options_pattern, search_text, re.MULTILINE):
                        options[opt_letter.upper()] = opt_text.strip()
                    
                    # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    correct_answer = ""
                    answer_patterns = [
                        r'–û—Ç–≤–µ—Ç[:\s]*([A-D])',
                        r'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π\s+–æ—Ç–≤–µ—Ç[:\s]*([A-D])',
                        r'–í–µ—Ä–Ω—ã–π\s+–æ—Ç–≤–µ—Ç[:\s]*([A-D])',
                        r'Correct[:\s]*([A-D])'
                    ]
                    
                    for ans_pattern in answer_patterns:
                        ans_match = re.search(ans_pattern, search_text, re.IGNORECASE)
                        if ans_match:
                            correct_answer = ans_match.group(1).upper()
                            break
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                    if options and q_num not in found_questions:
                        found_questions[q_num] = {
                            'number': q_num,
                            'question': question_text[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                            'options': options,
                            'correct_answer': correct_answer,
                            'page': full_text[:match.start()].count('--- PAGE')
                        }
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if len(found_questions) >= 5:
                    break
            
            questions = sorted(found_questions.values(), key=lambda x: x['number'])
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ PDF")
            
            if not questions:
                st.warning("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç PDF —Ñ–∞–π–ª–∞.")
                st.info("""
                **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É:**
                - –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã: 1., 2., 3. –∏–ª–∏ –í–æ–ø—Ä–æ—Å 1:
                - –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: A. B. C. D.
                - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "–û—Ç–≤–µ—Ç: A" –∏–ª–∏ "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: A"
                """)
            
            return questions
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {str(e)}", exc_info=True)
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–∞: {str(e)}")
        return []
    

    
    # ========= –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ö–ù–û–ü–ö–£ =========
    if st.button("üî¨ –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ PDF", key="diagnose_btn"):
        diagnose_pdf(st.session_state.test_pdf)
    # ========================================
st.divider()

def extract_answers_from_pdf(pdf_file):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    answers = {}
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ None
        if pdf_file is None:
            st.error("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return {}
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        try:
            pdf_file.seek(0)
        except:
            pass
        
        with pdfplumber.open(pdf_file) as pdf:
            full_text = ""
            
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    full_text += text + "\n"
            
            st.write("**üìÑ –¢–µ–∫—Å—Ç –∏–∑ PDF:**")
            st.code(full_text[:500] if full_text else "‚ùå –ü—É—Å—Ç–æ", language="text")
            
            if not full_text.strip():
                st.error("PDF –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∏–∂–µ.")
                return {}
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
            replacements = {
                '–ê': 'A', '–∞': 'A',
                '–í': 'B', '–≤': 'B',
                '–°': 'C', '—Å': 'C',
                '–î': 'D', '–¥': 'D'
            }
            
            for rus, lat in replacements.items():
                full_text = full_text.replace(rus, lat)
            
            # –ò—â–µ–º –æ—Ç–≤–µ—Ç—ã
            pattern = r'(\d+)\s*[.\):;\-‚Äì‚Äî]*\s*([A-D])\b'
            matches = re.findall(pattern, full_text, re.IGNORECASE)
            
            for num_str, ans in matches:
                answers[int(num_str)] = ans.upper()
            
            if answers:
                st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(answers)} –æ—Ç–≤–µ—Ç–æ–≤")
                st.json(answers)
            else:
                st.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.")
            
            return answers
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")
        return {}


def grade_test(test_questions, student_answers):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    results = []
    correct_count = 0
    
    for question in test_questions:
        q_num = question['number']
        correct_answer = question['correct_answer']
        student_answer = student_answers.get(q_num, None)
        
        is_correct = (student_answer == correct_answer) if student_answer else False
        
        if is_correct:
            correct_count += 1
        
        results.append({
            'number': q_num,
            'question': question['question'],
            'student_answer': student_answer or '‚Äî',
            'correct_answer': correct_answer,
            'is_correct': is_correct,
            'options': question['options']
        })
    
    total = len(test_questions)
    score = (correct_count / total * 100) if total > 0 else 0
    
    return results, score, correct_count

# –ü–æ—Å–ª–µ extract_answers_from_pdf –¥–æ–±–∞–≤—å—Ç–µ:

st.markdown("---")
st.subheader("‚úèÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ (–µ—Å–ª–∏ PDF –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")

manual_input = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞",
    placeholder="–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n1.A\n2.B\n3.C\n\n–∏–ª–∏\n1. –ê\n2. –í\n3. –°",
    height=150,
    key="manual_answer_input"
)

if st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã", key="check_manual"):
    if not manual_input.strip():
        st.error("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã!")
    else:
        # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        text = manual_input
        replacements = {'–ê':'A', '–∞':'A', '–í':'B', '–≤':'B', '–°':'C', '—Å':'C', '–î':'D', '–¥':'D'}
        for rus, lat in replacements.items():
            text = text.replace(rus, lat)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        manual_ans = {}
        pattern = r'(\d+)\s*[.\):;\-‚Äì‚Äî\s]*([A-D])\b'
        matches = re.findall(pattern, text, re.IGNORECASE)
        
        for num_str, ans in matches:
            manual_ans[int(num_str)] = ans.upper()
        
        if manual_ans:
            st.session_state.student_answers = manual_ans
            st.session_state.answers_processed = True
            
            st.success(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(manual_ans)}")
            st.json(manual_ans)
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–°–¢
            if st.session_state.get('test_data'):
                results, score, correct = grade_test(
                    st.session_state.test_data,
                    manual_ans
                )
                
                st.session_state.test_results = results
                st.session_state.test_score = score
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                st.markdown("---")
                st.header(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}%")
                st.progress(score/100)
                st.write(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:** {correct} –∏–∑ {len(st.session_state.test_data)}")
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
                for res in results:
                    icon = "‚úÖ" if res['is_correct'] else "‚ùå"
                    st.write(f"{icon} **–í–æ–ø—Ä–æ—Å {res['number']}:** {res['question'][:50]}...")
                    st.write(f"   –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: **{res['student_answer']}** | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: **{res['correct_answer']}**")
                
                st.balloons()
            else:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏!")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")

# === –†–£–ß–ù–û–ô –í–í–û–î –û–¢–í–ï–¢–û–í ===
st.markdown("---")
st.subheader("‚úèÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞")

with st.expander("üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤—Ä—É—á–Ω—É—é"):
    manual_input = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
        placeholder="1.A\n2.B\n3.C\n4.D\n\n–ò–ª–∏:\n1. A\n2. B\n3. C",
        height=150,
        key="manual_answers_area"
    )
    
    if st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã", key="submit_manual_answers"):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
        replacements = {'–ê':'A', '–∞':'A', '–í':'B', '–≤':'B', '–°':'C', '—Å':'C', '–î':'D', '–¥':'D'}
        for rus, lat in replacements.items():
            manual_input = manual_input.replace(rus, lat)
        
        manual_ans = {}
        
        # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        for line in manual_input.strip().split('\n'):
            # –ò—â–µ–º: —á–∏—Å–ª–æ + –ª—é–±–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å + –±—É–∫–≤–∞ A-D
            match = re.search(r'(\d+)\s*[.):;\-‚Äì‚Äî]*\s*([A-D])', line, re.IGNORECASE)
            if match:
                q_num = int(match.group(1))
                answer = match.group(2).upper()
                manual_ans[q_num] = answer
        
        if manual_ans:
            st.session_state.student_answers = manual_ans
            st.session_state.answers_processed = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç
            if st.session_state.test_data:
                results, score, correct = grade_test(
                    st.session_state.test_data,
                    st.session_state.student_answers
                )
                st.session_state.test_results = results
                st.session_state.test_score = score
                
                st.success(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{len(st.session_state.test_data)}")
                st.balloons()
                st.rerun()
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")


def save_test_results_to_db(student_id, test_name, score, correct_count, total_count):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –≤ –ë–î"""
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute('''INSERT INTO test_results 
                         (student_id, test_name, score, correct_count, total_count) 
                         VALUES (?, ?, ?, ?, ?)''',
                      (student_id, test_name, score, correct_count, total_count))
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {student_id}")
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
        return False


def grade_test(test_data, student_answers):
    results = []
    correct_count = 0
    
    for question in test_data:
        q_num = question['number']
        student_answer = student_answers.get(q_num, "").upper()
        correct_answer = question.get('correct_answer', '').upper()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if student_answer and student_answer in ['A', 'B', 'C', 'D']:
            is_correct = student_answer == correct_answer
        else:
            is_correct = False
        
        if is_correct:
            correct_count += 1
        
        results.append({
            'number': q_num,
            'question': question['question'],
            'options': question['options'],
            'student_answer': student_answer,
            'correct_answer': correct_answer,
            'is_correct': is_correct,
            'page': question['page']
        })
    
    score = round(100.0 * correct_count / len(test_data)) if test_data else 0
    return results, score, correct_count

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
def create_results_pdf(results, score, correct_count, total_questions):
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    custom_styles = {
        'Custom_Title': ParagraphStyle(
            name='Custom_Title',
            parent=styles['Heading1'],
            fontSize=18,
            alignment=TA_CENTER,
            spaceAfter=20
        ),
        'Custom_Header': ParagraphStyle(
            name='Custom_Header',
            parent=styles['Heading2'],
            fontSize=14,
            alignment=TA_LEFT,
            spaceAfter=10
        ),
        'Custom_QuestionText': ParagraphStyle(
            name='Custom_QuestionText',
            parent=styles['BodyText'],
            fontSize=12,
            spaceAfter=5
        ),
        'Custom_OptionText': ParagraphStyle(
            name='Custom_OptionText',
            parent=styles['BodyText'],
            fontSize=10,
            leftIndent=20,
            spaceAfter=3
        )
    }
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF
    content = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = Paragraph(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: {score}%", custom_styles['Custom_Title'])
    content.append(title)
    
    # –°–≤–æ–¥–∫–∞
    summary = Paragraph(
        f"<b>–°—Ç—É–¥–µ–Ω—Ç:</b> {st.session_state.student_id}<br/>"
        f"<b>–¢–µ—Å—Ç:</b> {st.session_state.test_name}<br/>"
        f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {correct_count}/{total_questions}<br/>"
        f"<b>–û—Ü–µ–Ω–∫–∞:</b> {score}%<br/><br/>",
        styles['BodyText']
    )
    content.append(summary)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
    header = Paragraph("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤:", custom_styles['Custom_Header'])
    content.append(header)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_data = [["‚Ññ", "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]]
    
    for res in results:
        status = "‚úÖ –í–µ—Ä–Ω–æ" if res['is_correct'] else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
        result_data.append([
            str(res['number']),
            res['question'][:100] + "..." if len(res['question']) > 100 else res['question'],
            res['student_answer'],
            res['correct_answer'],
            status
        ])
    
    table = Table(result_data, colWidths=[30, 200, 60, 80, 60])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 1), (-1, -1), 9),
    ]))
    
    content.append(table)
    content.append(Spacer(1, 20))
    
    # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    for res in results:
        content.append(Paragraph(f"<b>–í–æ–ø—Ä–æ—Å {res['number']}:</b> {res['question']}", custom_styles['Custom_QuestionText']))
        
        for option, text in res['options'].items():
            prefix = ""
            if option == res['correct_answer']:
                prefix = "<b>‚úì </b>"
            elif option == res['student_answer']:
                prefix = "<b>‚úó </b>"
                
            content.append(Paragraph(f"{prefix}{option}. {text}", custom_styles['Custom_OptionText']))
        
        content.append(Paragraph(
            f"<b>–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> {res['student_answer']} &nbsp; "
            f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {res['correct_answer']} &nbsp; "
            f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {'‚úÖ –í–µ—Ä–Ω–æ' if res['is_correct'] else '‚ùå –ù–µ–≤–µ—Ä–Ω–æ'}",
            custom_styles['Custom_OptionText']
        ))
        
        content.append(Spacer(1, 15))
    
    # –°–æ–∑–¥–∞–µ–º PDF
    doc.build(content)
    buffer.seek(0)
    return buffer

def calculate_grade(subject, result):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    """
    if GRADING_SYSTEM_AVAILABLE:
        grading_system = GradingSystem()
        
        if subject == "math":
            grade_result = grading_system.grade_math(result)
            return grade_result['grade'], grade_result.get('percentage', 0)
        
        elif subject == "eng":
            word_count = result.get('word_count', len(str(result).split()))
            errors = result if isinstance(result, list) else []
            grade_result = grading_system.grade_english(errors, word_count)
            return grade_result['grade'], grade_result.get('percentage', 0)
        
        elif subject == "test":
            grade_result = grading_system.grade_test(result.get('results', []))
            return grade_result['grade'], grade_result.get('percentage', 0)
    
    # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
    rules = st.session_state.grade_rules.get(subject, {})
    
    if subject == "math":
        error_count = 0 if result.get('is_correct', False) else 1
        for grade, max_errors in rules.items():
            if error_count <= max_errors:
                return int(grade), 100 if error_count == 0 else 75
    
    elif subject == "eng":
        error_count = len(result) if isinstance(result, list) else 0
        for grade, max_errors in rules.items():
            if error_count <= max_errors:
                return int(grade), max(0, 100 - error_count * 5)
    
    elif subject == "test":
        score = result.get('score', 0)
        for grade, min_score in rules.items():
            if score >= min_score:
                return int(grade), score
    
    return 2, 0


def add_to_grade_history(subject, grade, comment, percentage=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    entry = {
        "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
        "subject": subject,
        "grade": grade,
        "percentage": percentage,
        "comment": comment,
        "student": st.session_state.student_id
    }
    st.session_state.grade_history.append(entry)
    
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute('''INSERT INTO grades 
                         (student_id, subject, grade, percentage, comment) 
                         VALUES (?, ?, ?, ?, ?)''',
                      (st.session_state.student_id, subject, grade, percentage, comment))
            logger.info(f"–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {subject} -{grade} –±–∞–ª–ª–æ–≤")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {str(e)}")
        st.warning("–û—Ü–µ–Ω–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return False
    


# –°–∞–π–¥–±–∞—Ä
with st.sidebar:
    trans = translations[st.session_state.language]
    
    st.image("https://cdn-icons-png.flaticon.com/512/201/201623.png", width=80)
    st.markdown(f"### {trans['app_name']}")
    st.caption(trans["app_description"])
    
    st.session_state.language = st.selectbox(
        trans["language_select"], 
        ["–†—É—Å—Å–∫–∏–π", "English"],
        index=0 if st.session_state.language == "–†—É—Å—Å–∫–∏–π" else 1
    )
    trans = translations[st.session_state.language]
    
    st.divider()
    
    st.subheader("üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
    student_id = st.text_input(trans["student_id"], st.session_state.student_id)
    st.session_state.student_id = student_id
    
    level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è", ["–ù–∞—á–∞–ª—å–Ω—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"], 
                         index=["–ù–∞—á–∞–ª—å–Ω—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"].index(st.session_state.learning_level))
    st.session_state.learning_level = level
    
    st.divider()
    
    st.subheader(f"**{trans['canvas_integration']}**")
    canvas_url = st.text_input(
        trans["canvas_url"], 
        value=st.session_state.canvas_url,
        help="–ü—Ä–∏–º–µ—Ä: https://yourinstitution.instructure.com"
    )
    canvas_key = st.text_input(
        trans["canvas_key"], 
        type="password",
        value=st.session_state.canvas_key
    )
    
    if canvas_url and canvas_key and (canvas_url != st.session_state.canvas_url or canvas_key != st.session_state.canvas_key):
        st.session_state.canvas_url = canvas_url
        st.session_state.canvas_key = canvas_key
        canvas_api = CanvasAPI(st.session_state.canvas_url, st.session_state.canvas_key)
        success, user_name = canvas_api.test_connection()
        if success:
            st.success(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Canvas: {user_name}")
            success, courses = canvas_api.get_courses()
            if success:
                st.session_state.canvas_courses = courses
                st.session_state.selected_course = None
                st.session_state.canvas_assignments = []
            else:
                st.error(trans["canvas_error"])
        else:
            st.error(trans["canvas_error"])
    
    if st.session_state.canvas_courses:
        course_names = [course['name'] for course in st.session_state.canvas_courses]
        selected_course_name = st.selectbox(
            trans["canvas_courses"], 
            course_names,
            index=0
        )
        selected_course = next(course for course in st.session_state.canvas_courses if course['name'] == selected_course_name)
        
        if st.session_state.selected_course != selected_course['id']:
            st.session_state.selected_course = selected_course['id']
            canvas_api = CanvasAPI(st.session_state.canvas_url, st.session_state.canvas_key)
            success, assignments = canvas_api.get_assignments(selected_course['id'])
            if success:
                st.session_state.canvas_assignments = assignments
                st.session_state.selected_assignment = None
            else:
                st.session_state.canvas_assignments = []
        
        if st.session_state.canvas_assignments:
            assignment_names = [assignment['name'] for assignment in st.session_state.canvas_assignments]
            selected_assignment_name = st.selectbox(
                trans["canvas_assignments"], 
                assignment_names,
                index=0
            )
            st.session_state.selected_assignment = next(
                assignment for assignment in st.session_state.canvas_assignments 
                if assignment['name'] == selected_assignment_name
            )
            
            if st.button(trans["canvas_load"]):
                st.session_state.uploaded_text = st.session_state.selected_assignment['description']
                st.session_state.file_processed = True
                st.success(f"–ó–∞–¥–∞–Ω–∏–µ '{selected_assignment_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    
    st.divider()
    
    st.subheader(f"**{trans['api_settings']}**")
    
    api_key = st.text_input(
        trans["api_key"], 
        type="password",
        help=trans["api_help"],
        value=st.session_state.get('gemini_key', '')
    )
    
    if api_key and api_key != st.session_state.gemini_key:
        st.session_state.gemini_key = api_key
        st.success(trans["key_saved"])
        try:
            genai.configure(api_key=api_key)
            models = genai.list_models()
            model_names = [model.name.split('/')[-1] for model in models 
                          if 'generateContent' in model.supported_generation_methods]
            st.session_state.available_models = model_names
            
            if 'gemini-pro' in model_names:
                st.session_state.selected_model = 'gemini-pro'
            elif model_names:
                st.session_state.selected_model = model_names[0]
            
            st.session_state.ai_status['math']['error'] = None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    if st.session_state.available_models:
        selected_model = st.selectbox(
            trans["model_selection"],
            options=st.session_state.available_models,
            index=st.session_state.available_models.index(
                st.session_state.selected_model) if st.session_state.selected_model in st.session_state.available_models else 0
        )
        st.session_state.selected_model = selected_model
        st.info(f"**–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å:** {selected_model}")
    
    usage_percent = min(100, st.session_state.api_usage_count / st.session_state.api_limit * 100)
    st.progress(usage_percent / 100, 
               text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ API: {st.session_state.api_usage_count}/{st.session_state.api_limit}")
    
    if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", use_container_width=True, key="test_connection"):
        if st.session_state.gemini_key:
            try:
                models = genai.list_models()
                model_names = [model.name.split('/')[-1] for model in models 
                              if 'generateContent' in model.supported_generation_methods]
                st.session_state.available_models = model_names
                st.success(trans["connection_success"])
                st.info(f"{trans['available_models']} {', '.join(model_names[:3])}{'...' if len(model_names) > 3 else ''}")
            except Exception as e:
                error_msg = str(e)
                if "API_KEY" in error_msg or "401" in error_msg:
                    st.error(trans["invalid_key"])
                elif "429" in error_msg:
                    st.error(trans["rate_limit"])
                elif "404" in error_msg:
                    st.error(trans["model_not_found"])
                else:
                    st.error(f"{trans['connection_fail']}: {error_msg}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á —Å–Ω–∞—á–∞–ª–∞")
    
    st.divider()
    st.subheader(trans["features"])
    st.markdown("""
    - üß† AI-–æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    - üìà –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    - üèÜ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    - üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    - üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    - ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ API
    - üì• –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
    - üéì –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Canvas LMS
    - üóìÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ PDF
    """)

    st.divider()
    
    st.subheader(f"**{trans['grade_system']}**")
    grade_system = st.radio(
        trans["grade_system"],
        [trans["5_point"], trans["100_point"]],
        index=0 if st.session_state.grade_system == "5_point" else 1
    )
    st.session_state.grade_system = "5_point" if grade_system == trans["5_point"] else "100_point"
    
    st.checkbox(trans["auto_grade"], True, help=trans["grade_description"])
    
    st.divider()
    
    if st.button(trans["view_grades"], use_container_width=True):
        st.session_state.show_gradebook = not st.session_state.get('show_gradebook', False)
    
    if st.session_state.get('show_gradebook', False):
        st.subheader("üìù –ñ—É—Ä–Ω–∞–ª –æ—Ü–µ–Ω–æ–∫")
        if st.session_state.grade_history:
            grade_df = pd.DataFrame(st.session_state.grade_history)
            st.dataframe(grade_df, hide_index=True, use_container_width=True)
            
            fig = px.pie(grade_df, names='grade', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫')
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –ø—É—Å—Ç–∞")
st.divider()

if st.button("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", use_container_width=True):
    st.session_state.show_analytics = not st.session_state.get('show_analytics', False)

if st.session_state.get('show_analytics', False) and GRADING_SYSTEM_AVAILABLE:
    st.subheader("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
    
    if st.session_state.grade_history:
        df_grades = pd.DataFrame(st.session_state.grade_history)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        analytics = LearningAnalytics()
        trend_info = analytics.calculate_progress_trend(df_grades)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        trend_emoji = {
            'improving': 'üìà',
            'declining': 'üìâ',
            'stable': '‚û°Ô∏è',
            'insufficient_data': '‚ùì'
        }
        
        st.metric(
            "–¢—Ä–µ–Ω–¥ –æ–±—É—á–µ–Ω–∏—è",
            f"{trend_emoji.get(trend_info['trend'], '‚ùì')} {trend_info['trend']}",
            f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {trend_info.get('overall_avg', 0)}"
        )
        
        if trend_info['trend'] != 'insufficient_data':
            col1, col2 = st.columns(2)
            col1.metric("–ù–µ–¥–∞–≤–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", f"{trend_info.get('recent_avg', 0):.1f}")
            col2.metric("–õ—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞", trend_info.get('best_grade', 0))
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        fig = px.line(
            df_grades,
            x='date',
            y='grade',
            title='–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ü–µ–Ω–æ–∫',
            markers=True
        )
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    st.divider()
    st.markdown("""
    <div style="text-align: center;">
        <p>–í–µ—Ä—Å–∏—è 6.0.0</p>
        <p>¬© 2024 EduAI Tutor Pro</p>
    </div>
    """, unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title(f"‚ú® {trans['title']}")
st.markdown(f"**{trans['app_description']}**")

lottie_hello = load_lottie("https://assets9.lottiefiles.com/packages/lf20_vybwn7df.json")
if lottie_hello:
    st_lottie(lottie_hello, height=200, key="hello")

if st.session_state.waiting_for_api:
    current_time = time.time()
    remaining = int(60 - (current_time - st.session_state.rate_limit_timer))
    
    if remaining > 0:
        with st.empty():
            st.warning(f"{trans['wait_message']} {trans['retry_countdown']} {remaining} —Å–µ–∫")
            time.sleep(1)
            st.rerun()
    else:
        st.session_state.waiting_for_api = False

with st.expander("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É", expanded=True):
    uploaded_file = st.file_uploader(trans["upload"], type=["pdf", "png", "jpg", "jpeg"], 
                                    key="file_uploader")
    
    if uploaded_file and not st.session_state.file_processed:
        text_content = process_uploaded_file(uploaded_file)
        if text_content:
            st.session_state.uploaded_text = text_content
            st.session_state.file_processed = True
            st.session_state.file_uploaded = True
            st.success(trans["extraction_success"])
    
    if st.session_state.file_processed and st.session_state.file_uploaded:
        st.text_area("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", value=st.session_state.uploaded_text, height=150)
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", type="secondary"):
            st.session_state.file_processed = False
            st.session_state.file_uploaded = False
            st.session_state.uploaded_text = ""
            st.rerun()

st.subheader("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç")
subject_options = [
    trans["math"], 
    trans["eng"],
    trans["test"]
]
subject = st.radio(
    trans["subject"], 
    subject_options, 
    horizontal=True,
    index=0 if st.session_state.current_subject == trans["math"] else 
           1 if st.session_state.current_subject == trans["eng"] else 2,
    label_visibility="collapsed"
)
st.session_state.current_subject = subject

if subject == trans["test"]:
    trans = translations[st.session_state.language]
    
    st.subheader("üìù –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìÑ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        st.session_state.test_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", st.session_state.test_name)
        uploaded_test = st.file_uploader(
            trans["upload_test"], 
            type=["pdf"],
            key="test_uploader"
        )
        
        if uploaded_test:
            st.session_state.test_pdf = uploaded_test
            
    # ========= –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ö–ù–û–ü–ö–£ =========
            if st.button("üî¨ –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ PDF", key="diagnose_btn"):
                diagnose_pdf(st.session_state.test_pdf)
    # ========================================
        if st.button("üì• –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç", key="process_test_btn", disabled=not st.session_state.test_pdf):
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∞..."):
                # –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                st.session_state.test_data = extract_questions_from_pdf(st.session_state.test_pdf)
                
                if st.session_state.test_data:
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(st.session_state.test_data)} –≤–æ–ø—Ä–æ—Å–æ–≤")
                    st.session_state.show_test_viewer = True
                    st.session_state.test_processed = True
                    
                    # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                    with st.expander("üëÅÔ∏è –ü—Ä–µ–≤—å—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", expanded=False):
                        for q in st.session_state.test_data[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            st.write(f"**–í–æ–ø—Ä–æ—Å {q['number']}:** {q['question'][:100]}...")
                            st.write(f"–í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(q['options'])}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct_answer'] or '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
                            st.divider()
                else:
                    st.warning(trans["no_questions_found"])
    
    with col2:
        # === –ó–ê–ì–†–£–ó–ö–ê –û–¢–í–ï–¢–û–í –°–¢–£–î–ï–ù–¢–ê ===
        st.subheader("üìù –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞")

uploaded_answers = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Å –æ—Ç–≤–µ—Ç–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞", 
    type=['pdf'],
    key="student_answers_uploader"
)

if uploaded_answers is not None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
    st.session_state.answers_pdf = uploaded_answers
    
    st.info("üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã
    answers = extract_answers_from_pdf(uploaded_answers)
    
    if answers:
        st.session_state.student_answers = answers
        st.session_state.answers_processed = True
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(answers)} –æ—Ç–≤–µ—Ç–æ–≤")
    else:
        st.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∏–∂–µ.")
# === –†–£–ß–ù–û–ô –í–í–û–î (–µ—Å–ª–∏ PDF –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç) ===
st.markdown("---")
st.subheader("‚úèÔ∏è –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤—Ä—É—á–Ω—É—é")

manual_input = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
    placeholder="1.A\n2.B\n3.C\n4.D\n\n–∏–ª–∏\n1. –ê\n2. –í\n3. –°",
    height=150,
    key="manual_answers_text"
)

if st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", key="submit_answers_btn"):
    if not manual_input.strip():
        st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã!")
    else:
        # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
        text = manual_input
        replacements = {'–ê':'A', '–∞':'A', '–í':'B', '–≤':'B', '–°':'C', '—Å':'C', '–î':'D', '–¥':'D'}
        for rus, lat in replacements.items():
            text = text.replace(rus, lat)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        manual_ans = {}
        pattern = r'(\d+)\s*[.\):;\-‚Äì‚Äî]*\s*([A-D])\b'
        matches = re.findall(pattern, text, re.IGNORECASE)
        
        for num_str, ans in matches:
            manual_ans[int(num_str)] = ans.upper()
        
        if manual_ans:
            st.session_state.student_answers = manual_ans
            st.session_state.answers_processed = True
            
            st.success(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(manual_ans)} –æ—Ç–≤–µ—Ç–æ–≤")
            st.json(manual_ans)
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–°–¢
            if st.session_state.get('test_data'):
                results, score, correct = grade_test(
                    st.session_state.test_data,
                    manual_ans
                )
                
                st.session_state.test_results = results
                st.session_state.test_score = score
                
                st.balloons()
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏!")
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")  
            # === –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ ===
    st.subheader("üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PDF —Å –æ—Ç–≤–µ—Ç–∞–º–∏")
    
    try:
        import pdfplumber
        with pdfplumber.open(uploaded_answers) as pdf:
            full_text = ""
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    full_text += text + "\n"
            
            st.write(f"**–°—Ç—Ä–∞–Ω–∏—Ü –≤ PDF:** {len(pdf.pages)}")
            st.text_area("**–í–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ PDF:**", full_text, height=300, key="full_pdf_text")
            
            if not full_text.strip():
                st.error("‚ö†Ô∏è PDF –ø—É—Å—Ç–æ–π! –≠—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.")
            else:
                st.info("‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω! –°–º–æ—Ç—Ä–∏—Ç–µ –≤—ã—à–µ —á—Ç–æ –∏–∑–≤–ª–µ–∫–ª–æ—Å—å.")
                
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")

        if st.button("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", key="extract_answers_btn", disabled=not st.session_state.answers_pdf):
            with st.spinner("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤..."):
                # –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                st.session_state.student_answers = extract_answers_from_pdf(st.session_state.answers_pdf)
                
                if st.session_state.student_answers:
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(st.session_state.student_answers)} –æ—Ç–≤–µ—Ç–æ–≤")
                    st.session_state.answers_processed = True
                    
                    # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–æ–≤
                    with st.expander("üëÅÔ∏è –ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞", expanded=False):
                        for num, ans in list(st.session_state.student_answers.items())[:5]:
                            st.write(f"–í–æ–ø—Ä–æ—Å {num}: **{ans}**")
                    
                    if st.session_state.test_data:
                        st.session_state.test_results, st.session_state.test_score, correct_count = grade_test(
                            st.session_state.test_data, 
                            st.session_state.student_answers
                        )
                        st.balloons()
                    else:
                        st.warning(trans["no_questions_found"])
                else:
                    st.warning(trans["no_answers_found"])
    
    st.divider()
    
    # –†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    if st.session_state.test_data and st.session_state.student_answers:
        with st.expander(trans["manual_correction"], expanded=False):  # –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –°–¥–µ–ª–∞–ª–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–º
            st.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ")
            
            cols = st.columns([1, 3, 2, 2])
            with cols[0]:
                st.markdown("**‚Ññ**")
            with cols[1]:
                st.markdown("**–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞**")
            with cols[2]:
                st.markdown("**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç**")
            with cols[3]:
                st.markdown("**–°—Ç–∞—Ç—É—Å**")
            
            for i, q in enumerate(st.session_state.test_data):
                cols = st.columns([1, 3, 2, 2])
                with cols[0]:
                    st.markdown(f"**{q['number']}**")
                with cols[1]:
                    new_answer = st.text_input(
                        f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {q['number']}",
                        value=st.session_state.student_answers.get(q['number'], ""),
                        key=f"answer_{q['number']}",
                        label_visibility="collapsed"
                    )
                    st.session_state.student_answers[q['number']] = new_answer.upper()
                with cols[2]:
                    new_correct = st.text_input(
                        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {q['number']}",
                        value=q['correct_answer'],
                        key=f"correct_{q['number']}",
                        label_visibility="collapsed"
                    )
                    st.session_state.test_data[i]['correct_answer'] = new_correct.upper()
                with cols[3]:
                    correct = new_answer.upper() == new_correct.upper()
                    st.markdown(f"{'‚úÖ' if correct else '‚ùå'}")
            
            if st.button(trans["recalculate_results"], key="recalculate_results", use_container_width=True):
                st.session_state.test_results, st.session_state.test_score, correct_count = grade_test(
                    st.session_state.test_data, 
                    st.session_state.student_answers
                )
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                st.rerun()  # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞
    if st.session_state.test_data and st.session_state.show_test_viewer:
        with st.expander("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞", expanded=False):  # –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –°–¥–µ–ª–∞–ª–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–º
            for question in st.session_state.test_data:
                with st.expander(f"–í–æ–ø—Ä–æ—Å {question['number']}: {question['question'][:80]}...", expanded=False):
                    st.markdown(f"**–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:** {question['question']}")
                    st.caption(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {question['page']}")
                    
                    for option, text in question['options'].items():
                        is_correct = option == question['correct_answer']
                        st.markdown(f"{'‚úÖ' if is_correct else '‚ö™'} **{option}.** {text}")
                    
                    if question['correct_answer']:
                        st.success(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {question['correct_answer']}")
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï 5: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.test_results:
        st.divider()
        st.subheader(trans["test_summary"])
        
        correct_count = sum(1 for r in st.session_state.test_results if r['is_correct'])
        total_questions = len(st.session_state.test_results)
        score_percent = st.session_state.test_score
        
        # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if GRADING_SYSTEM_AVAILABLE:
            grading_system = GradingSystem()
            grade_info = grading_system.grade_test(st.session_state.test_results)
            
            grade_value = grade_info['grade']
            feedback = grade_info['feedback']
            
            st.success(f"**üéì –û—Ü–µ–Ω–∫–∞: {grade_value}/5**")
            st.info(f"**üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:** {feedback}")
        else:
            # Fallback
            grade_value, _ = calculate_grade("test", {"score": score_percent, "results": st.session_state.test_results})
            grade_text = trans[f"grade_{grade_value}"]
            st.success(f"**üéì –û—Ü–µ–Ω–∫–∞: {grade_text} ({grade_value}/5)**")
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)  # –ò–ó–ú–ï–ù–ï–ù–ò–ï 6: –î–æ–±–∞–≤–∏–ª–∏ 4-—é –∫–æ–ª–æ–Ω–∫—É
        col1.metric("–û–±—â–∏–π –±–∞–ª–ª", f"{score_percent}%")
        col2.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ", f"{correct_count}/{total_questions}")
        col3.metric("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ", total_questions - correct_count)
        col4.metric("–û—Ü–µ–Ω–∫–∞", f"{grade_value}/5")  # –î–û–ë–ê–í–õ–ï–ù–ò–ï
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        fig = go.Figure()
        fig.add_trace(go.Pie(
            labels=['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ'],
            values=[correct_count, total_questions - correct_count],
            hole=0.5,
            marker_colors=['#4CAF50', '#F44336'],
            textinfo='label+percent',
            textfont_size=14
        ))
        fig.update_layout(
            title='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤',
            height=300,
            showlegend=True,
            margin=dict(t=50, b=0, l=0, r=0)
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        if save_test_results_to_db(
            st.session_state.student_id,
            st.session_state.test_name,
            score_percent,
            correct_count,
            total_questions
        ):
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {st.session_state.student_id}")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
        st.subheader("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
        
        # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        filter_option = st.radio(
            "–ü–æ–∫–∞–∑–∞—Ç—å:",
            ["–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã", "–¢–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ", "–¢–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ"],
            horizontal=True
        )
        
        filtered_results = st.session_state.test_results
        if filter_option == "–¢–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ":
            filtered_results = [r for r in st.session_state.test_results if not r['is_correct']]
        elif filter_option == "–¢–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ":
            filtered_results = [r for r in st.session_state.test_results if r['is_correct']]
        
        for res in filtered_results:
            status = "‚úÖ" if res['is_correct'] else "‚ùå"
            with st.expander(f"{status} –í–æ–ø—Ä–æ—Å {res['number']}", expanded=False):
                st.markdown(f"**–í–æ–ø—Ä–æ—Å:** {res['question']}")
                
                cols = st.columns(2)
                with cols[0]:
                    st.markdown("**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:**")
                    for option, text in res['options'].items():
                        if option == res['correct_answer']:
                            st.success(f"‚úÖ **{option}.** {text}")
                        elif option == res['student_answer'] and not res['is_correct']:
                            st.error(f"‚ùå **{option}.** {text}")
                        else:
                            st.markdown(f"**{option}.** {text}")
                
                with cols[1]:
                    st.markdown(f"**–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:** `{res['student_answer']}`")
                    st.markdown(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** `{res['correct_answer']}`")
                    if res['is_correct']:
                        st.success("‚úÖ –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π")
                    else:
                        st.error("‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π")
                        st.caption(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ç–µ—Å—Ç–µ: {res['page']}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç PDF",
                data=create_results_pdf(
                    st.session_state.test_results,
                    st.session_state.test_score,
                    correct_count,
                    total_questions
                ),
                file_name=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_{st.session_state.student_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                mime="application/pdf",
                use_container_width=True
            )
        
        with col2:
            # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv_data = pd.DataFrame(st.session_state.test_results)
            st.download_button(
                label="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                data=csv_data.to_csv(index=False).encode('utf-8'),
                file_name=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_{st.session_state.student_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 7: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –æ—Ü–µ–Ω–∫–µ
        st.divider()
        st.subheader("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ü–µ–Ω–∫–µ")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if GRADING_SYSTEM_AVAILABLE and grade_info:
            default_comment = grade_info.get('feedback', '')
        else:
            if score_percent >= 90:
                default_comment = "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."
            elif score_percent >= 75:
                default_comment = "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ò–º–µ—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö."
            elif score_percent >= 60:
                default_comment = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã."
            else:
                default_comment = "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."
        
        st.session_state.grade_comment = st.text_area(
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", 
            value=default_comment,
            height=120,
            help="–≠—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤–º–µ—Å—Ç–µ —Å –æ—Ü–µ–Ω–∫–æ–π"
        )
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 8: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        col1, col2 = st.columns([3, 1])
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –∂—É—Ä–Ω–∞–ª", key="save_test_grade", use_container_width=True, type="primary"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
                if add_to_grade_history(
                    st.session_state.test_name, 
                    grade_value, 
                    st.session_state.grade_comment,
                    percentage=score_percent
                ):
                    st.success("‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏!")
                    st.balloons()
                else:
                    st.warning("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏, –Ω–æ –Ω–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        with col2:
            if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å", key="clear_test", use_container_width=True):
                st.session_state.test_results = []
                st.session_state.test_data = []
                st.session_state.student_answers = {}
                st.session_state.test_pdf = None
                st.session_state.answers_pdf = None
                st.rerun()
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:  # –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.info(f"""
        **üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é —Ç–µ—Å—Ç–æ–≤:**
        
        1. {trans['question_format']}
        2. {trans['answer_format']}
        3. –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∫–∞–∫:  
           **A.** –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç  
           **B.** –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        4. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∫:  
           **–û—Ç–≤–µ—Ç: A**
        5. –û—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:  
           **1. B**  
           **2. C**
        """)
# ============================================================================
# –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê –°–ï–ö–¶–ò–ò –ú–ê–¢–ï–ú–ê–¢–ò–ö–ò
# –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: elif subject == trans["math"]:
# –ó–∞–º–µ–Ω–∏—Ç–µ –≤–µ—Å—å –±–ª–æ–∫ –¥–æ elif subject == trans["eng"]: –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥
# ============================================================================

elif subject == trans["math"]:
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.write(f"**{trans['example']}** `x**2 + 2*x + 1`, {trans['answer']}: `(x+1)**2`")
        
        default_text = st.session_state.get('uploaded_text', 'x**2 + 2*x + 1')
        task = st.text_input(trans["task"], value=default_text)
        
        answer = st.text_input(trans["answer"], "(x+1)**2")
        
        if st.button(trans["check_math"], use_container_width=True, type="primary", key="math_check_btn"):
            with st.spinner("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏–µ..."):
                try:
                    math_result = check_math(task, answer)
                    st.session_state.math_result = math_result
                    math_result['task'] = task
                    math_result['answer'] = answer
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                    try:
                        with get_db_connection() as conn:
                            c = conn.cursor()
                            c.execute("INSERT INTO learning_history (student_id, subject, topic, score) VALUES (?, ?, ?, ?)",
                                      (st.session_state.student_id, "math", "–ê–ª–≥–µ–±—Ä–∞", 1 if math_result['is_correct'] else 0))
                            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {st.session_state.student_id}")
                    except Exception as db_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(db_error)}")
                    
                    if math_result['is_correct']:
                        st.success(trans["correct"])
                        st.balloons()
                    else:
                        st.error(trans["incorrect"])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: {str(e)}")
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
                    st.session_state.math_result = None
        
        if st.session_state.math_result:
            math_result = st.session_state.math_result
            
            with st.expander(trans["solution"], expanded=True):
                st.write(f"**{trans['original']}**")
                st.latex(rf"\text{{}} {task} \quad \rightarrow \quad {math_result.get('latex_answer', '')}")
                
                st.write(f"**{trans['explanation']}**")
                st.code(math_result.get('explanation', ''), language='python')
                
                st.write(f"**{trans['correct_answer']}**")
                st.latex(math_result.get('latex_answer', ''))
                
                st.write(f"**{trans['text_rep']}**")
                st.code(math_result.get('correct_answer', ''))
            
            if math_result.get('detailed_feedback'):
                with st.expander(trans["errors"], expanded=True):
                    st.write(math_result['detailed_feedback'])
            
            if 'math_scores' not in st.session_state:
                st.session_state.math_scores = []
            
            score = 1 if math_result['is_correct'] else 0
            st.session_state.math_scores.append(score)
            
            # AI –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            if st.session_state.gemini_key and st.session_state.selected_model:
                ai_state = st.session_state.ai_status['math']
                
                if ai_state['generating']:
                    with st.spinner(trans["ai_loading"]):
                        try:
                            api_available, remaining = check_api_rate_limit()
                            if not api_available:
                                st.error(f"–õ–∏–º–∏—Ç API –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫.")
                                ai_state['generating'] = False
                                st.session_state.waiting_for_api = True
                                st.session_state.rate_limit_timer = time.time()
                                time.sleep(1)
                                st.rerun()
                            
                            query_hash = hashlib.md5(f"{task}_{answer}_{st.session_state.selected_model}".encode()).hexdigest()
                            
                            try:
                                with get_db_connection() as conn:
                                    c = conn.cursor()
                                    c.execute("SELECT response FROM responses WHERE query_hash = ?", (query_hash,))
                                    cached_response = c.fetchone()
                                    
                                    if cached_response:
                                        ai_explanation = cached_response[0]
                                        logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –æ—Ç–≤–µ—Ç")
                                    else:
                                        current_time = time.time()
                                        if current_time - st.session_state.last_request_time < 2:
                                            time.sleep(2 - (current_time - st.session_state.last_request_time))
                                        
                                        ai_explanation = get_math_ai_feedback(
                                            task, 
                                            answer, 
                                            math_result.get('correct_answer', ''), 
                                            st.session_state.gemini_key,
                                            st.session_state.selected_model,
                                            trans["ai_math_prompt"]
                                        )
                                        st.session_state.last_request_time = time.time()
                                        st.session_state.api_usage_count += 1
                                        
                                        c.execute("INSERT OR REPLACE INTO responses (query_hash, response, timestamp) VALUES (?, ?, ?)",
                                                  (query_hash, ai_explanation, datetime.datetime.now()))
                                        logger.info("AI –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à")
                            except Exception as db_error:
                                logger.warning(f"–ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é: {str(db_error)}")
                                ai_explanation = get_math_ai_feedback(
                                    task, 
                                    answer, 
                                    math_result.get('correct_answer', ''), 
                                    st.session_state.gemini_key,
                                    st.session_state.selected_model,
                                    trans["ai_math_prompt"]
                                )
                            
                            ai_state['response'] = ai_explanation
                            ai_state['generating'] = False
                        except Exception as e:
                            error_msg = str(e)
                            logger.error(f"–û—à–∏–±–∫–∞ AI: {error_msg}")
                            if "429" in error_msg or "quota" in error_msg.lower():
                                ai_state['error'] = trans["rate_limit"]
                                st.session_state.rate_limit_timer = time.time()
                                st.session_state.waiting_for_api = True
                            elif "API_KEY" in error_msg or "401" in error_msg:
                                ai_state['error'] = trans["invalid_key"]
                            elif "404" in error_msg:
                                ai_state['error'] = trans["model_not_found"]
                            else:
                                ai_state['error'] = f"–û—à–∏–±–∫–∞: {error_msg}"
                            ai_state['generating'] = False
                
                if ai_state['error']:
                    st.error(f"**{trans['ai_error']}:** {ai_state['error']}")
                    if st.button(trans["ai_retry"], key="math_ai_retry", use_container_width=True):
                        ai_state['error'] = None
                        ai_state['generating'] = True
                        st.rerun()
                
                elif ai_state['response']:
                    st.info(f"**AI Tutor:** {ai_state['response']}")
                    if st.button(trans["ai_clear"], key="math_ai_clear", use_container_width=True):
                        ai_state['response'] = None
                        st.rerun()
                
                elif st.button(trans["ai_math"], use_container_width=True):
                    ai_state['generating'] = True
                    st.rerun()
            
            st.subheader(trans["video_explanation"])
            st_player("https://www.youtube.com/watch?v=KG6ILNOiMgM", height=350)
    
    with col2:
        st.subheader(trans["adaptive_learning"])
        
        if st.button(trans["generate_task"], use_container_width=True):
            task_new, answer_new = generate_personalized_task(st.session_state.student_id)
            st.session_state.personalized_task = {"task": task_new, "answer": answer_new}
        
        if st.session_state.personalized_task.get("task"):
            st.info("**–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—à–∏–±–æ–∫:**")
            st.code(st.session_state.personalized_task["task"])
            st.write("**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:**")
            st.code(st.session_state.personalized_task["answer"])
            
            if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ", key="use_personalized_task"):
                st.session_state.uploaded_text = st.session_state.personalized_task["task"]
                st.rerun()
    
    # –ë–ª–æ–∫ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
    if st.session_state.math_result:
        st.divider()
        st.subheader("–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if GRADING_SYSTEM_AVAILABLE:
            grading_system = GradingSystem()
            grade_info = grading_system.grade_math(st.session_state.math_result)
            
            grade_value = grade_info['grade']
            st.session_state.math_grade = grade_value
            
            grade_text = trans[f"grade_{grade_value}"]
            
            col1, col2 = st.columns([1, 2])
            with col1:
                st.metric("–û—Ü–µ–Ω–∫–∞", f"{grade_value}/5", grade_text)
            with col2:
                st.info(f"**{grade_info['feedback']}**")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            if grade_info.get('strengths'):
                with st.expander("–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã", expanded=False):
                    for strength in grade_info['strengths']:
                        st.write(f"‚úì {strength}")
            
            if grade_info.get('areas_for_improvement'):
                with st.expander("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", expanded=False):
                    for area in grade_info['areas_for_improvement']:
                        st.write(f"‚Üí {area}")
            
            comment = grade_info['feedback']
            percentage = grade_info.get('percentage', 100 if st.session_state.math_result['is_correct'] else 0)
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
            grade_value, percentage = calculate_grade("math", st.session_state.math_result)
            st.session_state.math_grade = grade_value
            
            grade_text = trans[f"grade_{grade_value}"]
            st.metric("–û—Ü–µ–Ω–∫–∞", f"{grade_value}/5", grade_text)
            
            comment = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!" if st.session_state.math_result['is_correct'] else "–ï—Å—Ç—å –æ—à–∏–±–∫–∏. –ò–∑—É—á–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ."
        
        st.session_state.grade_comment = st.text_area(
            trans["grade_comment"], 
            value=comment,
            height=100,
            help="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Ü–µ–Ω–∫–æ–π"
        )
        
        col1, col2 = st.columns([3, 1])
        with col1:
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –∂—É—Ä–Ω–∞–ª", key="save_math_grade", use_container_width=True, type="primary"):
                if add_to_grade_history("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", grade_value, st.session_state.grade_comment, percentage):
                    st.success("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                    st.balloons()
                else:
                    st.warning("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏")
        
        with col2:
            if st.button("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", key="clear_math", use_container_width=True):
                st.session_state.math_result = None
                st.rerun()

# ============================================================================
# –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê –°–ï–ö–¶–ò–ò –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û
# –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: elif subject == trans["eng"]:
# –ó–∞–º–µ–Ω–∏—Ç–µ –≤–µ—Å—å –±–ª–æ–∫ –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∫—Ü–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥
# ============================================================================

elif subject == trans["eng"]:
    col1, col2 = st.columns([2, 1])
    
    with col1:
        default_text = st.session_state.get('uploaded_text', 'He go to school.')
        text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:", value=default_text, height=300)
        
        if st.button(trans["check_text"], use_container_width=True, type="primary", key="eng_check_btn"):
            with st.spinner('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç...'):
                try:
                    errors = check_english(text)
                    st.session_state.english_errors = errors
                    
                    word_count = len(text.split())
                    error_count = len(errors)
                    
                    if word_count > 0:
                        score = max(1, 5 - (error_count / (word_count / 10)))
                        score = round(score, 1)
                    else:
                        score = 0
                    
                    st.session_state.english_score = score
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
                    try:
                        with get_db_connection() as conn:
                            c = conn.cursor()
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫
                            for error in errors:
                                c.execute('''INSERT INTO error_history (student_id, subject, error_type) 
                                             VALUES (?, ?, ?)
                                             ON CONFLICT(student_id, error_type) 
                                             DO UPDATE SET count = count + 1, last_occurrence = CURRENT_TIMESTAMP''',
                                          (st.session_state.student_id, "english", error.get('ruleId', 'unknown')))
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫
                            c.execute("SELECT error_type, count FROM error_history WHERE student_id = ?", 
                                      (st.session_state.student_id,))
                            st.session_state.error_history = [{"error_type": row[0], "count": row[1]} for row in c.fetchall()]
                            
                            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {st.session_state.student_id}")
                    except Exception as db_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(db_error)}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {str(e)}")
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
                    st.session_state.english_errors = []
                    st.session_state.english_score = None
        
        if 'english_score' in st.session_state and st.session_state.english_score is not None:
            st.metric("–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞", st.session_state.english_score, 
                      help="–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ: 5 - (–∫–æ–ª-–≤–æ –æ—à–∏–±–æ–∫ / (–∫–æ–ª-–≤–æ —Å–ª–æ–≤ / 10))")
        
        if st.session_state.english_errors is not None:
            errors = st.session_state.english_errors
            
            if not errors:
                st.success(trans["no_errors"])
                st.balloons()
            else:
                st.subheader(f"–ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫")
                for i, error in enumerate(errors):
                    if isinstance(error, dict) and 'message' in error:
                        with st.expander(f"–û—à–∏–±–∫–∞ #{i+1}: {error['message']}", expanded=True):
                            st.error(f"**{error['message']}**")
                            
                            if 'suggestion' in error and error['suggestion']:
                                st.info(f"**–°–æ–≤–µ—Ç:** {error['suggestion']}")
                            
                            if 'context' in error and error['context']:
                                st.code(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {error['context']}")
                            
                            rule_id = error.get('ruleId', '')
                            explanation = get_grammar_explanation(rule_id)
                            with st.expander(trans["why_error"], expanded=False):
                                st.write(explanation)
    
    with col2:
        if hasattr(st.session_state, 'error_history') and st.session_state.error_history:
            st.subheader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫")
            df_errors = pd.DataFrame(st.session_state.error_history)
            df_errors = df_errors.sort_values('count', ascending=False).head(5)
            
            fig, ax = plt.subplots()
            ax.barh(df_errors['error_type'], df_errors['count'], color='#ff6b6b')
            ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π')
            ax.set_title('–¢–æ–ø-5 —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫')
            st.pyplot(fig)
            
            st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**")
            for error_type in df_errors['error_type'].head(3):
                st.write(f"- {get_grammar_explanation(error_type)}")
    
    # –ë–ª–æ–∫ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    if st.session_state.english_errors is not None:
        st.divider()
        st.subheader("–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ")
        
        errors = st.session_state.english_errors
        word_count = len(text.split())
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
        if GRADING_SYSTEM_AVAILABLE:
            grading_system = GradingSystem()
            grade_info = grading_system.grade_english(errors, word_count)
            
            grade_value = grade_info['grade']
            st.session_state.eng_grade = grade_value
            
            grade_text = trans[f"grade_{grade_value}"]
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–û—Ü–µ–Ω–∫–∞", f"{grade_value}/5", grade_text)
            with col2:
                st.metric("–û—à–∏–±–æ–∫", grade_info['error_count'])
            with col3:
                st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{grade_info.get('percentage', 0):.1f}%")
            
            st.info(f"**{grade_info['feedback']}**")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫
            if grade_info.get('error_categories'):
                with st.expander("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", expanded=False):
                    for category, count in grade_info['error_categories'].items():
                        st.write(f"**{category.title()}:** {count} {'–æ—à–∏–±–∫–∞' if count == 1 else '–æ—à–∏–±–æ–∫'}")
            
            comment = grade_info['feedback']
            percentage = grade_info.get('percentage', 0)
        else:
            # Fallback
            error_count = len(errors)
            if word_count > 0:
                score = max(1, 5 - (error_count / (word_count / 10)))
                grade_value = int(round(score))
                percentage = max(0, 100 - error_count * 5)
            else:
                grade_value = 2
                percentage = 0
            
            grade_text = trans[f"grade_{grade_value}"]
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–û—Ü–µ–Ω–∫–∞", f"{grade_value}/5", grade_text)
            with col2:
                st.metric("–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫", error_count)
            
            comment = f"–ù–∞–π–¥–µ–Ω–æ {error_count} {'–æ—à–∏–±–∫–∞' if error_count == 1 else '–æ—à–∏–±–æ–∫'}. {'–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!' if error_count == 0 else '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.'}"
        
        st.session_state.grade_comment = st.text_area(
            trans["grade_comment"],
            value=comment,
            height=100,
            help="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å –æ—Ü–µ–Ω–∫–æ–π"
        )
        
        col1, col2 = st.columns([3, 1])
        with col1:
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –∂—É—Ä–Ω–∞–ª", key="save_eng_grade", use_container_width=True, type="primary"):
                if add_to_grade_history("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", grade_value, st.session_state.grade_comment, percentage):
                    st.success("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                    st.balloons()
                else:
                    st.warning("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏")
        
        with col2:
            if st.button("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", key="clear_eng", use_container_width=True):
                st.session_state.english_errors = None
                st.session_state.english_score = None
                st.rerun()

if st.session_state.math_result or st.session_state.english_errors or st.session_state.test_results:
    st.divider()
    with st.expander(trans["export_results"], expanded=False):
        report = generate_report()
        st.download_button(
            label=trans["export_btn"],
            data=report,
            file_name=f"report_{st.session_state.student_id}_{datetime.datetime.now().strftime('%Y%m%d')}.txt",
            mime="text/plain"
        )

st.subheader("‚úèÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ (–µ—Å–ª–∏ PDF –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")

with st.expander("–í–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä—É—á–Ω—É—é"):
    num_questions = st.number_input("–°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤?", 1, 20, 3, key="manual_num_q")
    
    if st.button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞", key="create_manual_fields"):
        st.session_state.manual_mode = True
    
    if st.session_state.get('manual_mode'):
        manual_q = []
        
        for i in range(num_questions):
            st.markdown(f"### –í–æ–ø—Ä–æ—Å {i+1}")
            q = st.text_input(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", key=f"mq_text_{i}")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                a = st.text_input("A)", key=f"mopt_a_{i}")
            with col2:
                b = st.text_input("B)", key=f"mopt_b_{i}")
            with col3:
                c = st.text_input("C)", key=f"mopt_c_{i}")
            with col4:
                d = st.text_input("D)", key=f"mopt_d_{i}")
            
            correct = st.radio("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π:", ['A','B','C','D'], key=f"mcorrect_{i}", horizontal=True)
            
            if q and a and b:
                manual_q.append({
                    'number': i+1,
                    'question': q,
                    'options': {'A':a, 'B':b, 'C':c, 'D':d},
                    'correct_answer': correct,
                    'page': 1
                })
        
        if st.button("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã", key="use_manual_q"):
            st.session_state.test_data = manual_q
            st.session_state.test_processed = True
            st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(manual_q)} –≤–æ–ø—Ä–æ—Å–æ–≤!")
            st.rerun()

st.divider()
# –∑–¥–µ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤–∞—à –∫–æ–¥...
with st.expander("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", expanded=True):
    feedback_dir = "feedback"
    os.makedirs(feedback_dir, exist_ok=True)

    feedback_text = st.text_area(trans["feedback"], height=100, key="feedback_text", 
                                value=st.session_state.feedback_text, 
                                placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏...")
    
    rating = st.slider("–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (1-5 –∑–≤—ë–∑–¥)", 1, 5, 5)
    
    if st.button(trans["send_feedback"], use_container_width=True, type="primary") and not st.session_state.feedback_sent:
        if feedback_text.strip():
            now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            feedback_hash = hashlib.md5(feedback_text.encode()).hexdigest()[:6]
            filename = f"{feedback_dir}/{st.session_state.student_id}_{now}_{feedback_hash}.txt"
            
            try:
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(f"–°—Ç—É–¥–µ–Ω—Ç: {st.session_state.student_id}\n")
                    f.write(f"–£—Ä–æ–≤–µ–Ω—å: {st.session_state.learning_level}\n")
                    f.write(f"–†–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * rating}\n")
                    f.write(f"–î–∞—Ç–∞: {now}\n\n")
                    f.write(feedback_text)
                    
                st.success("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                st.balloons()
                st.session_state.feedback_text = ""
                st.session_state.feedback_sent = True
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {str(e)}")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤")

tips = [
    "üí° –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏",
    "üí° –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
    "üí° –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    "üí° –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ API –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ",
    "üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π",
    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI-–æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—à–∏–±–æ–∫",
    "üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–º—ã",
    "üí° –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    "üí° –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤"
]

st.info(f"**{trans['pro_tip']}:** {tips[datetime.datetime.now().second % len(tips)]}")

st.divider()
st.markdown("""
<div style="text-align: center; padding: 20px; color: #7f8c8d;">
    <p>EduAI Tutor Pro ¬© 2024 | AI-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è</p>
    <p>–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</p>
</div>
""", unsafe_allow_html=True)

st.markdown("""
<style>
    :root {
        --primary: #6a11cb;
        --secondary: #2575fc;
        --success: #00b09b;
        --danger: #ff416c;
        --warning: #ffc107;
        --info: #17a2b8;
        --light: #f8f9fa;
        --dark: #343a40;
        --gradient: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    }
    
    body {
        background: linear-gradient(to right, #f5f7fa, #e4e7f0);
        color: #333;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
    }
    
    h1, h2, h3, h4, h5, h6 {
        color: var(--dark);
        font-weight: 700;
        margin-bottom: 1rem;
    }
    
    .stButton>button {
        border-radius: 12px;
        padding: 12px 28px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background: var(--gradient);
        color: white;
        border: none;
        font-size: 16px;
    }

    .stButton>button:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        background: linear-gradient(135deg, #5a0db9 0%, #1c65e0 100%);
    }
    
    .stButton>button:active {
        transform: translateY(1px);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .stButton>button:disabled {
        background: #cccccc;
        cursor: not-allowed;
    }
    
    .stExpander {
        background-color: white;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        border: none;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .stExpander:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);
    }
    
    [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #2c3e50 0%, #1a2530 100%);
        color: white;
        padding: 25px;
        box-shadow: 5px 0 15px rgba(0, 0, 0, 0.1);
    }
    
    [data-testid="stSidebar"] .stTextInput input {
        background-color: rgba(255, 255, 255, 0.12);
        color: white;
        border-radius: 10px;
        padding: 12px;
        border: 1px solid rgba(255,255,255,0.3);
        transition: all 0.3s;
    }
    
    [data-testid="stSidebar"] .stTextInput input:focus {
        background-color: rgba(255, 255, 255, 0.2);
        border-color: rgba(255,255,255,0.5);
    }
    
    [data-testid="stSidebar"] .stSelectbox select {
        background-color: rgba(255, 255, 255, 0.12);
        color: white;
        border-radius: 10px;
        padding: 10px;
        border: 1px solid rgba(255,255,255,0.3);
    }
    
    [data-testid="stSidebar"] .stSelectbox div[data-baseweb="select"]>div {
        background-color: rgba(255, 255, 255, 0.12);
        color: white;
    }
    
    [data-testid="stSidebar"] .stRadio > label {
        color: white;
        font-weight: 500;
    }
    
    [data-testid="stSidebar"] .stMarkdown h1, 
    [data-testid="stSidebar"] .stMarkdown h2, 
    [data-testid="stSidebar"] .stMarkdown h3, 
    [data-testid="stSidebar"] .stMarkdown h4, 
    [data-testid="stSidebar"] .stMarkdown h5, 
    [data-testid="stSidebar"] .stMarkdown h6 {
        color: white;
    }
    
    [data-testid="stSidebar"] .stProgress > div > div > div {
        background: var(--gradient);
    }
    
    .stDataFrame {
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.02); }
        100% { transform: scale(1); }
    }
    
    .stAlert, .stSuccess, .stError, .stWarning, .stInfo {
        animation: fadeIn 0.6s ease-out;
        border-radius: 12px;
        padding: 20px;
        margin: 15px 0;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }
    
    .stSuccess {
        background: linear-gradient(135deg, var(--success) 0%, #96c93d 100%);
        color: white;
        border: none;
    }
    
    .stError {
        background: linear-gradient(135deg, var(--danger) 0%, #ff4b2b 100%);
        color: white;
        border: none;
    }
    
    .stInfo {
        background: linear-gradient(135deg, var(--info) 0%, #6dd5ed 100%);
        color: white;
        border: none;
    }
    
    .stWarning {
        background: linear-gradient(135deg, var(--warning) 0%, #ffcc80 100%);
        color: #212529;
        border: none;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .stSpinner > div {
        border: 5px solid rgba(106, 17, 203, 0.2);
        border-top: 5px solid var(--primary);
        border-radius: 50%;
        width: 45px;
        height: 45px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }
    
    @media (max-width: 768px) {
        .main .block-container { 
            padding: 1.2rem; 
        }
        
        .stTextInput>div>div>input, .stTextArea>div>div>textarea {
            font-size: 16px !important; 
            padding: 14px !important;
        }
        
        .stButton>button { 
            width: 100%; 
            padding: 16px; 
            font-size: 17px; 
            margin: 10px 0; 
        }
        
        .sidebar .sidebar-content { 
            padding: 1.5rem; 
        }
        
        .stRadio>div { 
            flex-direction: column; 
            gap: 12px; 
        }
        
        .stRadio>div>label { 
            margin: 8px 0; 
            padding: 14px; 
            border-radius: 12px; 
            background: rgba(255, 255, 255, 0.12); 
            width: 100%;
        }
        
        .stTextArea>div>div>textarea { 
            min-height: 200px; 
        }
        
        h1 { 
            font-size: 2.2rem !important; 
        }
        
        h2 { 
            font-size: 1.8rem !important; 
        }
        
        h3 { 
            font-size: 1.6rem !important; 
        }
    }
    
    [data-testid="stAppViewContainer"] {
        background: linear-gradient(120deg, #e0f7fa 0%, #f5f5f5 100%);
    }
    
    .custom-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        margin: 20px 0;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-left: 5px solid var(--primary);
        animation: fadeIn 0.8s ease-out;
    }
    
    .custom-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
    }
    
    .stTextInput>div>div>input, .stTextArea>div>div>textarea {
        border-radius: 12px;
        padding: 14px 18px;
        border: 1px solid #ddd;
        transition: all 0.3s;
        background-color: white;
        font-size: 16px;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
    }
    
    .stTextInput>div>div>input:focus, .stTextArea>div>div>textarea:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.2);
    }
    
    .stRadio>div>label {
        background: white;
        border-radius: 12px;
        padding: 14px 22px;
        margin: 10px 0;
        box-shadow: 0 4px 10px rgba(0,0,0,0.08);
        transition: all 0.3s;
        font-weight: 500;
        border: 2px solid transparent;
    }
    
    .stRadio>div>label:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(0,0,0,0.1);
        border-color: rgba(106, 17, 203, 0.2);
    }
    
    .stRadio>div>div:first-child {
        background: var(--gradient);
        border-radius: 12px;
    }
    
    .stDivider {
        border-top: 2px solid var(--primary);
        border-radius: 2px;
        margin: 30px 0;
        opacity: 0.3;
    }
    
    @keyframes fadeInMain {
        from { opacity: 0; transform: translateX(-20px); }
        to { opacity: 1; transform: translateX(0); }
    }
    
    .main .block-container {
        animation: fadeInMain 0.8s ease-out;
    }
    
    @keyframes fadeInSidebar {
        from { opacity: 0; transform: translateX(20px); }
        to { opacity: 1; transform: translateX(0); }
    }
    
    [data-testid="stSidebar"] {
        animation: fadeInSidebar 0.8s ease-out;
    }
    
    @keyframes pulseButton {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    .stButton>button:focus {
        animation: pulseButton 0.6s ease;
    }
    
    .stProgress > div > div > div {
        background: var(--gradient) !important;
    }
    
    .stMarkdown p, .stMarkdown li {
        font-size: 16px;
        line-height: 1.8;
    }
    
    .stTooltip {
        background: rgba(255,255,255,0.9) !important;
        color: #333 !important;
        border-radius: 10px !important;
        box-shadow: 0 5px 15px rgba(0,0,0,0.15) !important;
        border: none !important;
        padding: 15px !important;
        font-size: 14px !important;
    }
    
    .lottie-container {
        margin: 0 auto;
        display: flex;
        justify-content: center;
    }
</style>
""", unsafe_allow_html=True)